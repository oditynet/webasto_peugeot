
webasto_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a4  080052a4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080052a4  080052a4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052a4  080052a4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080052ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae8  20000020  080052cc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  080052cc  00021b08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001259f  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000284c  00000000  00000000  000325e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  00034e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00035bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002223  00000000  00000000  00036850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e634  00000000  00000000  00038a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b0e9  00000000  00000000  000470a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000068  00000000  00000000  000d2190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b8  00000000  00000000  000d21f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__aeabi_drsub>:
 8000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000114:	e002      	b.n	800011c <__adddf3>
 8000116:	bf00      	nop

08000118 <__aeabi_dsub>:
 8000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800011c <__adddf3>:
 800011c:	b530      	push	{r4, r5, lr}
 800011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000126:	ea94 0f05 	teq	r4, r5
 800012a:	bf08      	it	eq
 800012c:	ea90 0f02 	teqeq	r0, r2
 8000130:	bf1f      	itttt	ne
 8000132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000142:	f000 80e2 	beq.w	800030a <__adddf3+0x1ee>
 8000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800014e:	bfb8      	it	lt
 8000150:	426d      	neglt	r5, r5
 8000152:	dd0c      	ble.n	800016e <__adddf3+0x52>
 8000154:	442c      	add	r4, r5
 8000156:	ea80 0202 	eor.w	r2, r0, r2
 800015a:	ea81 0303 	eor.w	r3, r1, r3
 800015e:	ea82 0000 	eor.w	r0, r2, r0
 8000162:	ea83 0101 	eor.w	r1, r3, r1
 8000166:	ea80 0202 	eor.w	r2, r0, r2
 800016a:	ea81 0303 	eor.w	r3, r1, r3
 800016e:	2d36      	cmp	r5, #54	; 0x36
 8000170:	bf88      	it	hi
 8000172:	bd30      	pophi	{r4, r5, pc}
 8000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000184:	d002      	beq.n	800018c <__adddf3+0x70>
 8000186:	4240      	negs	r0, r0
 8000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000198:	d002      	beq.n	80001a0 <__adddf3+0x84>
 800019a:	4252      	negs	r2, r2
 800019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001a0:	ea94 0f05 	teq	r4, r5
 80001a4:	f000 80a7 	beq.w	80002f6 <__adddf3+0x1da>
 80001a8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80001b0:	db0d      	blt.n	80001ce <__adddf3+0xb2>
 80001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001b6:	fa22 f205 	lsr.w	r2, r2, r5
 80001ba:	1880      	adds	r0, r0, r2
 80001bc:	f141 0100 	adc.w	r1, r1, #0
 80001c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80001c4:	1880      	adds	r0, r0, r2
 80001c6:	fa43 f305 	asr.w	r3, r3, r5
 80001ca:	4159      	adcs	r1, r3
 80001cc:	e00e      	b.n	80001ec <__adddf3+0xd0>
 80001ce:	f1a5 0520 	sub.w	r5, r5, #32
 80001d2:	f10e 0e20 	add.w	lr, lr, #32
 80001d6:	2a01      	cmp	r2, #1
 80001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001dc:	bf28      	it	cs
 80001de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001e2:	fa43 f305 	asr.w	r3, r3, r5
 80001e6:	18c0      	adds	r0, r0, r3
 80001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80001f0:	d507      	bpl.n	8000202 <__adddf3+0xe6>
 80001f2:	f04f 0e00 	mov.w	lr, #0
 80001f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80001fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000206:	d31b      	bcc.n	8000240 <__adddf3+0x124>
 8000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800020c:	d30c      	bcc.n	8000228 <__adddf3+0x10c>
 800020e:	0849      	lsrs	r1, r1, #1
 8000210:	ea5f 0030 	movs.w	r0, r0, rrx
 8000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000218:	f104 0401 	add.w	r4, r4, #1
 800021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000224:	f080 809a 	bcs.w	800035c <__adddf3+0x240>
 8000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800022c:	bf08      	it	eq
 800022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000232:	f150 0000 	adcs.w	r0, r0, #0
 8000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023a:	ea41 0105 	orr.w	r1, r1, r5
 800023e:	bd30      	pop	{r4, r5, pc}
 8000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000244:	4140      	adcs	r0, r0
 8000246:	eb41 0101 	adc.w	r1, r1, r1
 800024a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800024e:	f1a4 0401 	sub.w	r4, r4, #1
 8000252:	d1e9      	bne.n	8000228 <__adddf3+0x10c>
 8000254:	f091 0f00 	teq	r1, #0
 8000258:	bf04      	itt	eq
 800025a:	4601      	moveq	r1, r0
 800025c:	2000      	moveq	r0, #0
 800025e:	fab1 f381 	clz	r3, r1
 8000262:	bf08      	it	eq
 8000264:	3320      	addeq	r3, #32
 8000266:	f1a3 030b 	sub.w	r3, r3, #11
 800026a:	f1b3 0220 	subs.w	r2, r3, #32
 800026e:	da0c      	bge.n	800028a <__adddf3+0x16e>
 8000270:	320c      	adds	r2, #12
 8000272:	dd08      	ble.n	8000286 <__adddf3+0x16a>
 8000274:	f102 0c14 	add.w	ip, r2, #20
 8000278:	f1c2 020c 	rsb	r2, r2, #12
 800027c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000280:	fa21 f102 	lsr.w	r1, r1, r2
 8000284:	e00c      	b.n	80002a0 <__adddf3+0x184>
 8000286:	f102 0214 	add.w	r2, r2, #20
 800028a:	bfd8      	it	le
 800028c:	f1c2 0c20 	rsble	ip, r2, #32
 8000290:	fa01 f102 	lsl.w	r1, r1, r2
 8000294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000298:	bfdc      	itt	le
 800029a:	ea41 010c 	orrle.w	r1, r1, ip
 800029e:	4090      	lslle	r0, r2
 80002a0:	1ae4      	subs	r4, r4, r3
 80002a2:	bfa2      	ittt	ge
 80002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002a8:	4329      	orrge	r1, r5
 80002aa:	bd30      	popge	{r4, r5, pc}
 80002ac:	ea6f 0404 	mvn.w	r4, r4
 80002b0:	3c1f      	subs	r4, #31
 80002b2:	da1c      	bge.n	80002ee <__adddf3+0x1d2>
 80002b4:	340c      	adds	r4, #12
 80002b6:	dc0e      	bgt.n	80002d6 <__adddf3+0x1ba>
 80002b8:	f104 0414 	add.w	r4, r4, #20
 80002bc:	f1c4 0220 	rsb	r2, r4, #32
 80002c0:	fa20 f004 	lsr.w	r0, r0, r4
 80002c4:	fa01 f302 	lsl.w	r3, r1, r2
 80002c8:	ea40 0003 	orr.w	r0, r0, r3
 80002cc:	fa21 f304 	lsr.w	r3, r1, r4
 80002d0:	ea45 0103 	orr.w	r1, r5, r3
 80002d4:	bd30      	pop	{r4, r5, pc}
 80002d6:	f1c4 040c 	rsb	r4, r4, #12
 80002da:	f1c4 0220 	rsb	r2, r4, #32
 80002de:	fa20 f002 	lsr.w	r0, r0, r2
 80002e2:	fa01 f304 	lsl.w	r3, r1, r4
 80002e6:	ea40 0003 	orr.w	r0, r0, r3
 80002ea:	4629      	mov	r1, r5
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	fa21 f004 	lsr.w	r0, r1, r4
 80002f2:	4629      	mov	r1, r5
 80002f4:	bd30      	pop	{r4, r5, pc}
 80002f6:	f094 0f00 	teq	r4, #0
 80002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80002fe:	bf06      	itte	eq
 8000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000304:	3401      	addeq	r4, #1
 8000306:	3d01      	subne	r5, #1
 8000308:	e74e      	b.n	80001a8 <__adddf3+0x8c>
 800030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800030e:	bf18      	it	ne
 8000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000314:	d029      	beq.n	800036a <__adddf3+0x24e>
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	d005      	beq.n	800032e <__adddf3+0x212>
 8000322:	ea54 0c00 	orrs.w	ip, r4, r0
 8000326:	bf04      	itt	eq
 8000328:	4619      	moveq	r1, r3
 800032a:	4610      	moveq	r0, r2
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	ea91 0f03 	teq	r1, r3
 8000332:	bf1e      	ittt	ne
 8000334:	2100      	movne	r1, #0
 8000336:	2000      	movne	r0, #0
 8000338:	bd30      	popne	{r4, r5, pc}
 800033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800033e:	d105      	bne.n	800034c <__adddf3+0x230>
 8000340:	0040      	lsls	r0, r0, #1
 8000342:	4149      	adcs	r1, r1
 8000344:	bf28      	it	cs
 8000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000350:	bf3c      	itt	cc
 8000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000356:	bd30      	popcc	{r4, r5, pc}
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf1a      	itte	ne
 8000370:	4619      	movne	r1, r3
 8000372:	4610      	movne	r0, r2
 8000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000378:	bf1c      	itt	ne
 800037a:	460b      	movne	r3, r1
 800037c:	4602      	movne	r2, r0
 800037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000382:	bf06      	itte	eq
 8000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000388:	ea91 0f03 	teqeq	r1, r3
 800038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	bf00      	nop

08000394 <__aeabi_ui2d>:
 8000394:	f090 0f00 	teq	r0, #0
 8000398:	bf04      	itt	eq
 800039a:	2100      	moveq	r1, #0
 800039c:	4770      	bxeq	lr
 800039e:	b530      	push	{r4, r5, lr}
 80003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003a8:	f04f 0500 	mov.w	r5, #0
 80003ac:	f04f 0100 	mov.w	r1, #0
 80003b0:	e750      	b.n	8000254 <__adddf3+0x138>
 80003b2:	bf00      	nop

080003b4 <__aeabi_i2d>:
 80003b4:	f090 0f00 	teq	r0, #0
 80003b8:	bf04      	itt	eq
 80003ba:	2100      	moveq	r1, #0
 80003bc:	4770      	bxeq	lr
 80003be:	b530      	push	{r4, r5, lr}
 80003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	f04f 0100 	mov.w	r1, #0
 80003d4:	e73e      	b.n	8000254 <__adddf3+0x138>
 80003d6:	bf00      	nop

080003d8 <__aeabi_f2d>:
 80003d8:	0042      	lsls	r2, r0, #1
 80003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003de:	ea4f 0131 	mov.w	r1, r1, rrx
 80003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003e6:	bf1f      	itttt	ne
 80003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80003f4:	4770      	bxne	lr
 80003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80003fa:	bf08      	it	eq
 80003fc:	4770      	bxeq	lr
 80003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000402:	bf04      	itt	eq
 8000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000418:	e71c      	b.n	8000254 <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_ul2d>:
 800041c:	ea50 0201 	orrs.w	r2, r0, r1
 8000420:	bf08      	it	eq
 8000422:	4770      	bxeq	lr
 8000424:	b530      	push	{r4, r5, lr}
 8000426:	f04f 0500 	mov.w	r5, #0
 800042a:	e00a      	b.n	8000442 <__aeabi_l2d+0x16>

0800042c <__aeabi_l2d>:
 800042c:	ea50 0201 	orrs.w	r2, r0, r1
 8000430:	bf08      	it	eq
 8000432:	4770      	bxeq	lr
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800043a:	d502      	bpl.n	8000442 <__aeabi_l2d+0x16>
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800044e:	f43f aed8 	beq.w	8000202 <__adddf3+0xe6>
 8000452:	f04f 0203 	mov.w	r2, #3
 8000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800045a:	bf18      	it	ne
 800045c:	3203      	addne	r2, #3
 800045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000462:	bf18      	it	ne
 8000464:	3203      	addne	r2, #3
 8000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 fe03 	lsl.w	lr, r1, r3
 800047a:	ea40 000e 	orr.w	r0, r0, lr
 800047e:	fa21 f102 	lsr.w	r1, r1, r2
 8000482:	4414      	add	r4, r2
 8000484:	e6bd      	b.n	8000202 <__adddf3+0xe6>
 8000486:	bf00      	nop

08000488 <__aeabi_dmul>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000496:	bf1d      	ittte	ne
 8000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800049c:	ea94 0f0c 	teqne	r4, ip
 80004a0:	ea95 0f0c 	teqne	r5, ip
 80004a4:	f000 f8de 	bleq	8000664 <__aeabi_dmul+0x1dc>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea81 0603 	eor.w	r6, r1, r3
 80004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ba:	bf18      	it	ne
 80004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004c8:	d038      	beq.n	800053c <__aeabi_dmul+0xb4>
 80004ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80004ce:	f04f 0500 	mov.w	r5, #0
 80004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004de:	f04f 0600 	mov.w	r6, #0
 80004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004e6:	f09c 0f00 	teq	ip, #0
 80004ea:	bf18      	it	ne
 80004ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80004fc:	d204      	bcs.n	8000508 <__aeabi_dmul+0x80>
 80004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000502:	416d      	adcs	r5, r5
 8000504:	eb46 0606 	adc.w	r6, r6, r6
 8000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000520:	bf88      	it	hi
 8000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000526:	d81e      	bhi.n	8000566 <__aeabi_dmul+0xde>
 8000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800052c:	bf08      	it	eq
 800052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000532:	f150 0000 	adcs.w	r0, r0, #0
 8000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000540:	ea46 0101 	orr.w	r1, r6, r1
 8000544:	ea40 0002 	orr.w	r0, r0, r2
 8000548:	ea81 0103 	eor.w	r1, r1, r3
 800054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000550:	bfc2      	ittt	gt
 8000552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800055a:	bd70      	popgt	{r4, r5, r6, pc}
 800055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000560:	f04f 0e00 	mov.w	lr, #0
 8000564:	3c01      	subs	r4, #1
 8000566:	f300 80ab 	bgt.w	80006c0 <__aeabi_dmul+0x238>
 800056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800056e:	bfde      	ittt	le
 8000570:	2000      	movle	r0, #0
 8000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000576:	bd70      	pople	{r4, r5, r6, pc}
 8000578:	f1c4 0400 	rsb	r4, r4, #0
 800057c:	3c20      	subs	r4, #32
 800057e:	da35      	bge.n	80005ec <__aeabi_dmul+0x164>
 8000580:	340c      	adds	r4, #12
 8000582:	dc1b      	bgt.n	80005bc <__aeabi_dmul+0x134>
 8000584:	f104 0414 	add.w	r4, r4, #20
 8000588:	f1c4 0520 	rsb	r5, r4, #32
 800058c:	fa00 f305 	lsl.w	r3, r0, r5
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f205 	lsl.w	r2, r1, r5
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005a8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ac:	eb42 0106 	adc.w	r1, r2, r6
 80005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005b4:	bf08      	it	eq
 80005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f1c4 040c 	rsb	r4, r4, #12
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f304 	lsl.w	r3, r0, r4
 80005c8:	fa20 f005 	lsr.w	r0, r0, r5
 80005cc:	fa01 f204 	lsl.w	r2, r1, r4
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	f141 0100 	adc.w	r1, r1, #0
 80005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e4:	bf08      	it	eq
 80005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f205 	lsl.w	r2, r0, r5
 80005f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005f8:	fa20 f304 	lsr.w	r3, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea43 0302 	orr.w	r3, r3, r2
 8000604:	fa21 f004 	lsr.w	r0, r1, r4
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	fa21 f204 	lsr.w	r2, r1, r4
 8000610:	ea20 0002 	bic.w	r0, r0, r2
 8000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f094 0f00 	teq	r4, #0
 8000628:	d10f      	bne.n	800064a <__aeabi_dmul+0x1c2>
 800062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800062e:	0040      	lsls	r0, r0, #1
 8000630:	eb41 0101 	adc.w	r1, r1, r1
 8000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000638:	bf08      	it	eq
 800063a:	3c01      	subeq	r4, #1
 800063c:	d0f7      	beq.n	800062e <__aeabi_dmul+0x1a6>
 800063e:	ea41 0106 	orr.w	r1, r1, r6
 8000642:	f095 0f00 	teq	r5, #0
 8000646:	bf18      	it	ne
 8000648:	4770      	bxne	lr
 800064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	eb43 0303 	adc.w	r3, r3, r3
 8000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000658:	bf08      	it	eq
 800065a:	3d01      	subeq	r5, #1
 800065c:	d0f7      	beq.n	800064e <__aeabi_dmul+0x1c6>
 800065e:	ea43 0306 	orr.w	r3, r3, r6
 8000662:	4770      	bx	lr
 8000664:	ea94 0f0c 	teq	r4, ip
 8000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800066c:	bf18      	it	ne
 800066e:	ea95 0f0c 	teqne	r5, ip
 8000672:	d00c      	beq.n	800068e <__aeabi_dmul+0x206>
 8000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000678:	bf18      	it	ne
 800067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800067e:	d1d1      	bne.n	8000624 <__aeabi_dmul+0x19c>
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000692:	bf06      	itte	eq
 8000694:	4610      	moveq	r0, r2
 8000696:	4619      	moveq	r1, r3
 8000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800069c:	d019      	beq.n	80006d2 <__aeabi_dmul+0x24a>
 800069e:	ea94 0f0c 	teq	r4, ip
 80006a2:	d102      	bne.n	80006aa <__aeabi_dmul+0x222>
 80006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006a8:	d113      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006aa:	ea95 0f0c 	teq	r5, ip
 80006ae:	d105      	bne.n	80006bc <__aeabi_dmul+0x234>
 80006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006b4:	bf1c      	itt	ne
 80006b6:	4610      	movne	r0, r2
 80006b8:	4619      	movne	r1, r3
 80006ba:	d10a      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006da:	bd70      	pop	{r4, r5, r6, pc}

080006dc <__aeabi_ddiv>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006ea:	bf1d      	ittte	ne
 80006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006f0:	ea94 0f0c 	teqne	r4, ip
 80006f4:	ea95 0f0c 	teqne	r5, ip
 80006f8:	f000 f8a7 	bleq	800084a <__aeabi_ddiv+0x16e>
 80006fc:	eba4 0405 	sub.w	r4, r4, r5
 8000700:	ea81 0e03 	eor.w	lr, r1, r3
 8000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800070c:	f000 8088 	beq.w	8000820 <__aeabi_ddiv+0x144>
 8000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000734:	429d      	cmp	r5, r3
 8000736:	bf08      	it	eq
 8000738:	4296      	cmpeq	r6, r2
 800073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000742:	d202      	bcs.n	800074a <__aeabi_ddiv+0x6e>
 8000744:	085b      	lsrs	r3, r3, #1
 8000746:	ea4f 0232 	mov.w	r2, r2, rrx
 800074a:	1ab6      	subs	r6, r6, r2
 800074c:	eb65 0503 	sbc.w	r5, r5, r3
 8000750:	085b      	lsrs	r3, r3, #1
 8000752:	ea4f 0232 	mov.w	r2, r2, rrx
 8000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800075e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000766:	bf22      	ittt	cs
 8000768:	1ab6      	subcs	r6, r6, r2
 800076a:	4675      	movcs	r5, lr
 800076c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	ea4f 0232 	mov.w	r2, r2, rrx
 8000776:	ebb6 0e02 	subs.w	lr, r6, r2
 800077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800077e:	bf22      	ittt	cs
 8000780:	1ab6      	subcs	r6, r6, r2
 8000782:	4675      	movcs	r5, lr
 8000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000796:	bf22      	ittt	cs
 8000798:	1ab6      	subcs	r6, r6, r2
 800079a:	4675      	movcs	r5, lr
 800079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007bc:	d018      	beq.n	80007f0 <__aeabi_ddiv+0x114>
 80007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80007da:	d1c0      	bne.n	800075e <__aeabi_ddiv+0x82>
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	d10b      	bne.n	80007fa <__aeabi_ddiv+0x11e>
 80007e2:	ea41 0100 	orr.w	r1, r1, r0
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80007ee:	e7b6      	b.n	800075e <__aeabi_ddiv+0x82>
 80007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f4:	bf04      	itt	eq
 80007f6:	4301      	orreq	r1, r0
 80007f8:	2000      	moveq	r0, #0
 80007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007fe:	bf88      	it	hi
 8000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000804:	f63f aeaf 	bhi.w	8000566 <__aeabi_dmul+0xde>
 8000808:	ebb5 0c03 	subs.w	ip, r5, r3
 800080c:	bf04      	itt	eq
 800080e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000816:	f150 0000 	adcs.w	r0, r0, #0
 800081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800082c:	bfc2      	ittt	gt
 800082e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000836:	bd70      	popgt	{r4, r5, r6, pc}
 8000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083c:	f04f 0e00 	mov.w	lr, #0
 8000840:	3c01      	subs	r4, #1
 8000842:	e690      	b.n	8000566 <__aeabi_dmul+0xde>
 8000844:	ea45 0e06 	orr.w	lr, r5, r6
 8000848:	e68d      	b.n	8000566 <__aeabi_dmul+0xde>
 800084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	bf08      	it	eq
 8000854:	ea95 0f0c 	teqeq	r5, ip
 8000858:	f43f af3b 	beq.w	80006d2 <__aeabi_dmul+0x24a>
 800085c:	ea94 0f0c 	teq	r4, ip
 8000860:	d10a      	bne.n	8000878 <__aeabi_ddiv+0x19c>
 8000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000866:	f47f af34 	bne.w	80006d2 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	f47f af25 	bne.w	80006bc <__aeabi_dmul+0x234>
 8000872:	4610      	mov	r0, r2
 8000874:	4619      	mov	r1, r3
 8000876:	e72c      	b.n	80006d2 <__aeabi_dmul+0x24a>
 8000878:	ea95 0f0c 	teq	r5, ip
 800087c:	d106      	bne.n	800088c <__aeabi_ddiv+0x1b0>
 800087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000882:	f43f aefd 	beq.w	8000680 <__aeabi_dmul+0x1f8>
 8000886:	4610      	mov	r0, r2
 8000888:	4619      	mov	r1, r3
 800088a:	e722      	b.n	80006d2 <__aeabi_dmul+0x24a>
 800088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000896:	f47f aec5 	bne.w	8000624 <__aeabi_dmul+0x19c>
 800089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800089e:	f47f af0d 	bne.w	80006bc <__aeabi_dmul+0x234>
 80008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008a6:	f47f aeeb 	bne.w	8000680 <__aeabi_dmul+0x1f8>
 80008aa:	e712      	b.n	80006d2 <__aeabi_dmul+0x24a>

080008ac <__gedf2>:
 80008ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008b0:	e006      	b.n	80008c0 <__cmpdf2+0x4>
 80008b2:	bf00      	nop

080008b4 <__ledf2>:
 80008b4:	f04f 0c01 	mov.w	ip, #1
 80008b8:	e002      	b.n	80008c0 <__cmpdf2+0x4>
 80008ba:	bf00      	nop

080008bc <__cmpdf2>:
 80008bc:	f04f 0c01 	mov.w	ip, #1
 80008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008d6:	d01b      	beq.n	8000910 <__cmpdf2+0x54>
 80008d8:	b001      	add	sp, #4
 80008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008de:	bf0c      	ite	eq
 80008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008e4:	ea91 0f03 	teqne	r1, r3
 80008e8:	bf02      	ittt	eq
 80008ea:	ea90 0f02 	teqeq	r0, r2
 80008ee:	2000      	moveq	r0, #0
 80008f0:	4770      	bxeq	lr
 80008f2:	f110 0f00 	cmn.w	r0, #0
 80008f6:	ea91 0f03 	teq	r1, r3
 80008fa:	bf58      	it	pl
 80008fc:	4299      	cmppl	r1, r3
 80008fe:	bf08      	it	eq
 8000900:	4290      	cmpeq	r0, r2
 8000902:	bf2c      	ite	cs
 8000904:	17d8      	asrcs	r0, r3, #31
 8000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800090a:	f040 0001 	orr.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d102      	bne.n	8000920 <__cmpdf2+0x64>
 800091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800091e:	d107      	bne.n	8000930 <__cmpdf2+0x74>
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d1d6      	bne.n	80008d8 <__cmpdf2+0x1c>
 800092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800092e:	d0d3      	beq.n	80008d8 <__cmpdf2+0x1c>
 8000930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_cdrcmple>:
 8000938:	4684      	mov	ip, r0
 800093a:	4610      	mov	r0, r2
 800093c:	4662      	mov	r2, ip
 800093e:	468c      	mov	ip, r1
 8000940:	4619      	mov	r1, r3
 8000942:	4663      	mov	r3, ip
 8000944:	e000      	b.n	8000948 <__aeabi_cdcmpeq>
 8000946:	bf00      	nop

08000948 <__aeabi_cdcmpeq>:
 8000948:	b501      	push	{r0, lr}
 800094a:	f7ff ffb7 	bl	80008bc <__cmpdf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	bf48      	it	mi
 8000952:	f110 0f00 	cmnmi.w	r0, #0
 8000956:	bd01      	pop	{r0, pc}

08000958 <__aeabi_dcmpeq>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff fff4 	bl	8000948 <__aeabi_cdcmpeq>
 8000960:	bf0c      	ite	eq
 8000962:	2001      	moveq	r0, #1
 8000964:	2000      	movne	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmplt>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffea 	bl	8000948 <__aeabi_cdcmpeq>
 8000974:	bf34      	ite	cc
 8000976:	2001      	movcc	r0, #1
 8000978:	2000      	movcs	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmple>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffe0 	bl	8000948 <__aeabi_cdcmpeq>
 8000988:	bf94      	ite	ls
 800098a:	2001      	movls	r0, #1
 800098c:	2000      	movhi	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_dcmpge>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff ffce 	bl	8000938 <__aeabi_cdrcmple>
 800099c:	bf94      	ite	ls
 800099e:	2001      	movls	r0, #1
 80009a0:	2000      	movhi	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmpgt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffc4 	bl	8000938 <__aeabi_cdrcmple>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <deregister_tm_clones>:
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <deregister_tm_clones+0x10>)
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <deregister_tm_clones+0x14>)
 80009c0:	4283      	cmp	r3, r0
 80009c2:	d002      	beq.n	80009ca <deregister_tm_clones+0xe>
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <deregister_tm_clones+0x18>)
 80009c6:	b103      	cbz	r3, 80009ca <deregister_tm_clones+0xe>
 80009c8:	4718      	bx	r3
 80009ca:	4770      	bx	lr
 80009cc:	20000020 	.word	0x20000020
 80009d0:	20000020 	.word	0x20000020
 80009d4:	00000000 	.word	0x00000000

080009d8 <register_tm_clones>:
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <register_tm_clones+0x18>)
 80009da:	4906      	ldr	r1, [pc, #24]	; (80009f4 <register_tm_clones+0x1c>)
 80009dc:	1a09      	subs	r1, r1, r0
 80009de:	1089      	asrs	r1, r1, #2
 80009e0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80009e4:	1049      	asrs	r1, r1, #1
 80009e6:	d002      	beq.n	80009ee <register_tm_clones+0x16>
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <register_tm_clones+0x20>)
 80009ea:	b103      	cbz	r3, 80009ee <register_tm_clones+0x16>
 80009ec:	4718      	bx	r3
 80009ee:	4770      	bx	lr
 80009f0:	20000020 	.word	0x20000020
 80009f4:	20000020 	.word	0x20000020
 80009f8:	00000000 	.word	0x00000000

080009fc <__do_global_dtors_aux>:
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4c06      	ldr	r4, [pc, #24]	; (8000a18 <__do_global_dtors_aux+0x1c>)
 8000a00:	7823      	ldrb	r3, [r4, #0]
 8000a02:	b943      	cbnz	r3, 8000a16 <__do_global_dtors_aux+0x1a>
 8000a04:	f7ff ffda 	bl	80009bc <deregister_tm_clones>
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__do_global_dtors_aux+0x20>)
 8000a0a:	b113      	cbz	r3, 8000a12 <__do_global_dtors_aux+0x16>
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <__do_global_dtors_aux+0x24>)
 8000a0e:	f3af 8000 	nop.w
 8000a12:	2301      	movs	r3, #1
 8000a14:	7023      	strb	r3, [r4, #0]
 8000a16:	bd10      	pop	{r4, pc}
 8000a18:	20000020 	.word	0x20000020
 8000a1c:	00000000 	.word	0x00000000
 8000a20:	080051f0 	.word	0x080051f0

08000a24 <frame_dummy>:
 8000a24:	b508      	push	{r3, lr}
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <frame_dummy+0x18>)
 8000a28:	b11b      	cbz	r3, 8000a32 <frame_dummy+0xe>
 8000a2a:	4905      	ldr	r1, [pc, #20]	; (8000a40 <frame_dummy+0x1c>)
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <frame_dummy+0x20>)
 8000a2e:	f3af 8000 	nop.w
 8000a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000a36:	f7ff bfcf 	b.w	80009d8 <register_tm_clones>
 8000a3a:	bf00      	nop
 8000a3c:	00000000 	.word	0x00000000
 8000a40:	20000024 	.word	0x20000024
 8000a44:	080051f0 	.word	0x080051f0

08000a48 <button_press>:
void USART1_UART_Init_8E1(uint16_t speed);
void SystemClock_Config(void);
void webasto_func(void *argument);

uint8_t button_press()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	uint8_t button_count = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]
	//if(HAL_GPIO_ReadPin(GPIOA, button_on_off_Pin))
	if(HAL_GPIO_ReadPin(button_on_off_GPIO_Port, button_on_off_Pin))
 8000a52:	2102      	movs	r1, #2
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <button_press+0x64>)
 8000a56:	f001 f853 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00e      	beq.n	8000a7e <button_press+0x36>
	{
		while(HAL_GPIO_ReadPin(button_on_off_GPIO_Port, button_on_off_Pin) /*== GPIO_PIN_SET*/)
 8000a60:	e005      	b.n	8000a6e <button_press+0x26>
		{
			button_count = button_count + 1;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	3301      	adds	r3, #1
 8000a66:	71fb      	strb	r3, [r7, #7]
			osDelay(100);
 8000a68:	2064      	movs	r0, #100	; 0x64
 8000a6a:	f001 ffff 	bl	8002a6c <osDelay>
		while(HAL_GPIO_ReadPin(button_on_off_GPIO_Port, button_on_off_Pin) /*== GPIO_PIN_SET*/)
 8000a6e:	2102      	movs	r1, #2
 8000a70:	480e      	ldr	r0, [pc, #56]	; (8000aac <button_press+0x64>)
 8000a72:	f001 f845 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f2      	bne.n	8000a62 <button_press+0x1a>
 8000a7c:	e003      	b.n	8000a86 <button_press+0x3e>
		}
	}
	else{button_count = 0; return 0;}
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	2300      	movs	r3, #0
 8000a84:	e00d      	b.n	8000aa2 <button_press+0x5a>
	if(button_count <= 20 && button_count >= 10)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b14      	cmp	r3, #20
 8000a8a:	d804      	bhi.n	8000a96 <button_press+0x4e>
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b09      	cmp	r3, #9
 8000a90:	d901      	bls.n	8000a96 <button_press+0x4e>
		return 1; //shot press button
 8000a92:	2301      	movs	r3, #1
 8000a94:	e005      	b.n	8000aa2 <button_press+0x5a>
	else if(button_count > 20 && button_count < 800)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b14      	cmp	r3, #20
 8000a9a:	d901      	bls.n	8000aa0 <button_press+0x58>
		return 2; //long press button
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	e000      	b.n	8000aa2 <button_press+0x5a>
	else
		return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010800 	.word	0x40010800

08000ab0 <info_led_light>:
void info_led_light(uint32_t sec)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(led_info_GPIO_Port, led_info_Pin, GPIO_PIN_RESET);
	//osDelay(sec);
	HAL_GPIO_WritePin(led_info_GPIO_Port, led_info_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <info_led_light+0x40>)
 8000ac0:	f001 f835 	bl	8001b2e <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET);
	osDelay(sec);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f001 ffd1 	bl	8002a6c <osDelay>
	//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_info_GPIO_Port, led_info_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <info_led_light+0x40>)
 8000ad2:	f001 f82c 	bl	8001b2e <HAL_GPIO_WritePin>
	osDelay(sec);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f001 ffc8 	bl	8002a6c <osDelay>
	//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_info_GPIO_Port, led_info_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <info_led_light+0x40>)
 8000ae4:	f001 f823 	bl	8001b2e <HAL_GPIO_WritePin>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40011000 	.word	0x40011000
 8000af4:	00000000 	.word	0x00000000

08000af8 <WEBASTO_Proc>:
void WEBASTO_Proc() {
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b093      	sub	sp, #76	; 0x4c
 8000afc:	af02      	add	r7, sp, #8

		const char WB_GET_PARAM[] =  {0x24,0x05,0x50,0x30,0x0c,0x0e,0x43}; // ack 42 08 d0 30 0c 2e 0e 30 52 e4
 8000afe:	4a9a      	ldr	r2, [pc, #616]	; (8000d68 <WEBASTO_Proc+0x270>)
 8000b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b08:	6018      	str	r0, [r3, #0]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	8019      	strh	r1, [r3, #0]
 8000b0e:	3302      	adds	r3, #2
 8000b10:	0c0a      	lsrs	r2, r1, #16
 8000b12:	701a      	strb	r2, [r3, #0]
		const char WB_Tcode_SHIFT = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		const char WB_Tvalue_SHIFT = 5;
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		const char WB_Ucode_SHIFT = 6;
 8000b20:	2306      	movs	r3, #6
 8000b22:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		const char WB_Uvalue_SHIFT = 7;
 8000b26:	2307      	movs	r3, #7
 8000b28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		const char WB_GET_PARAM_PACKSIZE = 10;
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		const char WB_START_CMD[] = {0x24,0x03,0x21,0x0F,0x09};  // 24=from Telestart to Heater,  0F=15 min work
 8000b32:	4a8e      	ldr	r2, [pc, #568]	; (8000d6c <WEBASTO_Proc+0x274>)
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3c:	6018      	str	r0, [r3, #0]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	7019      	strb	r1, [r3, #0]
		const char WB_START_CMD_ACK[] = {0x42,0x03,0xA1,0x0F,0xEF};
 8000b42:	4a8b      	ldr	r2, [pc, #556]	; (8000d70 <WEBASTO_Proc+0x278>)
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4c:	6018      	str	r0, [r3, #0]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	7019      	strb	r1, [r3, #0]
		const char WB_STARTSUPP_CMD[] = {0x24,0x04,0x44,0x21,0x00,0x45};
 8000b52:	4a88      	ldr	r2, [pc, #544]	; (8000d74 <WEBASTO_Proc+0x27c>)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5c:	6018      	str	r0, [r3, #0]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	8019      	strh	r1, [r3, #0]
		const char WB_STARTSUPP_CMD_ACK[] = {0x42,0x03,0xA1,0x0F,0xEF};
 8000b62:	4a83      	ldr	r2, [pc, #524]	; (8000d70 <WEBASTO_Proc+0x278>)
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b6c:	6018      	str	r0, [r3, #0]
 8000b6e:	3304      	adds	r3, #4
 8000b70:	7019      	strb	r1, [r3, #0]
		const char WB_STOP_CMD[] = {0x24,0x02,0x10,0x36}; //
 8000b72:	4b81      	ldr	r3, [pc, #516]	; (8000d78 <WEBASTO_Proc+0x280>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	60bb      	str	r3, [r7, #8]
		const char WB_STOP_CMD_ACK[] = {0x42,0x02,0x90,0xD0};
 8000b78:	4b80      	ldr	r3, [pc, #512]	; (8000d7c <WEBASTO_Proc+0x284>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	607b      	str	r3, [r7, #4]
		const char null = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	70fb      	strb	r3, [r7, #3]
		uint8_t ret_code=0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		static char tempstr[100]={0};

		for(int i=0;i<sizeof(tempstr);i++) tempstr[i]=0; // clear
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b8c:	e007      	b.n	8000b9e <WEBASTO_Proc+0xa6>
 8000b8e:	4a7c      	ldr	r2, [pc, #496]	; (8000d80 <WEBASTO_Proc+0x288>)
 8000b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b92:	4413      	add	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba0:	2b63      	cmp	r3, #99	; 0x63
 8000ba2:	d9f4      	bls.n	8000b8e <WEBASTO_Proc+0x96>

		switch (WTT_State) {
 8000ba4:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <WEBASTO_Proc+0x28c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	f200 81a1 	bhi.w	8000ef0 <WEBASTO_Proc+0x3f8>
 8000bae:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <WEBASTO_Proc+0xbc>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000c45 	.word	0x08000c45
 8000bbc:	08000c15 	.word	0x08000c15
 8000bc0:	08000d13 	.word	0x08000d13
 8000bc4:	08000d95 	.word	0x08000d95
 8000bc8:	08000e99 	.word	0x08000e99
				case (WTT_POWER_DOWN): {
						osDelay(10);
 8000bcc:	200a      	movs	r0, #10
 8000bce:	f001 ff4d 	bl	8002a6c <osDelay>
						WEBASTO_WORK_PARAM.CurrTimeWork=WEBASTO_WORK_PARAM.TotalTimeWork*60;
 8000bd2:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <WEBASTO_Proc+0x290>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b69      	ldr	r3, [pc, #420]	; (8000d88 <WEBASTO_Proc+0x290>)
 8000be4:	805a      	strh	r2, [r3, #2]
						if((button_press() == 1 || button_press() == 2) && WEBASTO_WORK_PARAM.WorkStatus==0)
 8000be6:	f7ff ff2f 	bl	8000a48 <button_press>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <WEBASTO_Proc+0x104>
 8000bf0:	f7ff ff2a 	bl	8000a48 <button_press>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	f040 8179 	bne.w	8000eee <WEBASTO_Proc+0x3f6>
 8000bfc:	4b62      	ldr	r3, [pc, #392]	; (8000d88 <WEBASTO_Proc+0x290>)
 8000bfe:	791b      	ldrb	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 8174 	bne.w	8000eee <WEBASTO_Proc+0x3f6>
						{
							WTT_Change_state(WTT_POWER_WAKEUP);
 8000c06:	2002      	movs	r0, #2
 8000c08:	f000 fae0 	bl	80011cc <WTT_Change_state>
							info_led_light(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f7ff ff4f 	bl	8000ab0 <info_led_light>
							//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_RESET);
							//osDelay(300);
							//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET);
							//HAL_GPIO_WritePin(GPIOA, led_on_off_Pin, GPIO_PIN_SET); //led on
						} break;
 8000c12:	e16c      	b.n	8000eee <WEBASTO_Proc+0x3f6>
				}
				case (WTT_POWER_WAKEUP): {
						// Wake-Up Heater
						USART1_UART_Init_8E1(360); // 25ms K-line on down
 8000c14:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8000c18:	f000 fab0 	bl	800117c <USART1_UART_Init_8E1>
						ret_code = WBUS_TX((char*)&null,1,NULL,1,1,500);
 8000c1c:	1cf8      	adds	r0, r7, #3
 8000c1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	2301      	movs	r3, #1
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	f000 f96d 	bl	8000f0c <WBUS_TX>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						osDelay(25);							// 25ms  K-line on up
 8000c38:	2019      	movs	r0, #25
 8000c3a:	f001 ff17 	bl	8002a6c <osDelay>
						WTT_Change_state(WTT_GET_PARAM);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 fac4 	bl	80011cc <WTT_Change_state>
				} /*break*/;
				case (WTT_GET_PARAM): {
						// Get param T U
						USART1_UART_Init_8E1(2400);
 8000c44:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8000c48:	f000 fa98 	bl	800117c <USART1_UART_Init_8E1>
						ret_code = WBUS_TX_EXT((char*)WB_GET_PARAM,sizeof(WB_GET_PARAM),(char*)WBUS_ACK_EXT,WB_GET_PARAM_PACKSIZE,4,500);
 8000c4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c50:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000c54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	4a4a      	ldr	r2, [pc, #296]	; (8000d8c <WEBASTO_Proc+0x294>)
 8000c62:	2107      	movs	r1, #7
 8000c64:	f000 fa0c 	bl	8001080 <WBUS_TX_EXT>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						if(ret_code==0) { // WTT not respond
 8000c6e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10a      	bne.n	8000c8c <WEBASTO_Proc+0x194>
								WTT_Change_state(WTT_POWER_DOWN);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 faa8 	bl	80011cc <WTT_Change_state>
								info_led_light(100);
 8000c7c:	2064      	movs	r0, #100	; 0x64
 8000c7e:	f7ff ff17 	bl	8000ab0 <info_led_light>
								info_led_light(500);
 8000c82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c86:	f7ff ff13 	bl	8000ab0 <info_led_light>
 8000c8a:	e03e      	b.n	8000d0a <WEBASTO_Proc+0x212>
								//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET); //led off
								}
						else {
								if(WBUS_ACK_EXT[WB_Tcode_SHIFT]==0x0c) WEBASTO_WORK_PARAM.CurrT = WBUS_ACK_EXT[WB_Tvalue_SHIFT]-50;
 8000c8c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c90:	4a3e      	ldr	r2, [pc, #248]	; (8000d8c <WEBASTO_Proc+0x294>)
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	2b0c      	cmp	r3, #12
 8000c96:	d108      	bne.n	8000caa <WEBASTO_Proc+0x1b2>
 8000c98:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000c9c:	4a3b      	ldr	r2, [pc, #236]	; (8000d8c <WEBASTO_Proc+0x294>)
 8000c9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ca0:	3b32      	subs	r3, #50	; 0x32
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <WEBASTO_Proc+0x290>)
 8000ca8:	721a      	strb	r2, [r3, #8]
								if(WBUS_ACK_EXT[WB_Ucode_SHIFT]==0x0e) WEBASTO_WORK_PARAM.CurrUakb = (uint16_t) ((WBUS_ACK_EXT[WB_Uvalue_SHIFT]<<8) | WBUS_ACK_EXT[WB_Uvalue_SHIFT+1]);
 8000caa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000cae:	4a37      	ldr	r2, [pc, #220]	; (8000d8c <WEBASTO_Proc+0x294>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	2b0e      	cmp	r3, #14
 8000cb4:	d110      	bne.n	8000cd8 <WEBASTO_Proc+0x1e0>
 8000cb6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000cba:	4a34      	ldr	r2, [pc, #208]	; (8000d8c <WEBASTO_Proc+0x294>)
 8000cbc:	5cd3      	ldrb	r3, [r2, r3]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4930      	ldr	r1, [pc, #192]	; (8000d8c <WEBASTO_Proc+0x294>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <WEBASTO_Proc+0x290>)
 8000cd6:	80da      	strh	r2, [r3, #6]
								if(WEBASTO_WORK_PARAM.WorkStatus==0) {
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <WEBASTO_Proc+0x290>)
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10d      	bne.n	8000cfc <WEBASTO_Proc+0x204>
										WTT_Change_state(WTT_START_HEATER);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 fa73 	bl	80011cc <WTT_Change_state>
										HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_RESET); //led on
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4829      	ldr	r0, [pc, #164]	; (8000d90 <WEBASTO_Proc+0x298>)
 8000cec:	f000 ff1f 	bl	8001b2e <HAL_GPIO_WritePin>
										HAL_GPIO_WritePin(rele_pomp_GPIO_Port, rele_pomp_Pin, GPIO_PIN_RESET); //rele on
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4826      	ldr	r0, [pc, #152]	; (8000d90 <WEBASTO_Proc+0x298>)
 8000cf6:	f000 ff1a 	bl	8001b2e <HAL_GPIO_WritePin>
 8000cfa:	e006      	b.n	8000d0a <WEBASTO_Proc+0x212>
										}
								else if(WEBASTO_WORK_PARAM.WorkStatus==1) {
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <WEBASTO_Proc+0x290>)
 8000cfe:	791b      	ldrb	r3, [r3, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d102      	bne.n	8000d0a <WEBASTO_Proc+0x212>
										WTT_Change_state(WTT_SUPPORT_HEATER);
 8000d04:	2004      	movs	r0, #4
 8000d06:	f000 fa61 	bl	80011cc <WTT_Change_state>
										}
								}
						osDelay(50);
 8000d0a:	2032      	movs	r0, #50	; 0x32
 8000d0c:	f001 feae 	bl	8002a6c <osDelay>
						} break;
 8000d10:	e0ee      	b.n	8000ef0 <WEBASTO_Proc+0x3f8>
				case (WTT_START_HEATER): {
						// Start Heater
						USART1_UART_Init_8E1(2400);
 8000d12:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8000d16:	f000 fa31 	bl	800117c <USART1_UART_Init_8E1>
						ret_code = WBUS_TX((char*)WB_START_CMD,sizeof(WB_START_CMD),(char*)WB_START_CMD_ACK,sizeof(WB_START_CMD_ACK),4,500);
 8000d1a:	f107 021c 	add.w	r2, r7, #28
 8000d1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000d22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	2304      	movs	r3, #4
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	2105      	movs	r1, #5
 8000d30:	f000 f8ec 	bl	8000f0c <WBUS_TX>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						if(ret_code==0) { // WTT not respond
 8000d3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10a      	bne.n	8000d58 <WEBASTO_Proc+0x260>
								info_led_light(500);
 8000d42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d46:	f7ff feb3 	bl	8000ab0 <info_led_light>
								info_led_light(100);
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	f7ff feb0 	bl	8000ab0 <info_led_light>
								WTT_Change_state(WTT_STOPHEATER);
 8000d50:	2005      	movs	r0, #5
 8000d52:	f000 fa3b 	bl	80011cc <WTT_Change_state>
								}
						else {
								WTT_Change_state(WTT_SUPPORT_HEATER);
								WEBASTO_WORK_PARAM.WorkStatus=1;
								}
						} break;
 8000d56:	e0cb      	b.n	8000ef0 <WEBASTO_Proc+0x3f8>
								WTT_Change_state(WTT_SUPPORT_HEATER);
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f000 fa37 	bl	80011cc <WTT_Change_state>
								WEBASTO_WORK_PARAM.WorkStatus=1;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <WEBASTO_Proc+0x290>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	711a      	strb	r2, [r3, #4]
						} break;
 8000d64:	e0c4      	b.n	8000ef0 <WEBASTO_Proc+0x3f8>
 8000d66:	bf00      	nop
 8000d68:	08005214 	.word	0x08005214
 8000d6c:	0800521c 	.word	0x0800521c
 8000d70:	08005224 	.word	0x08005224
 8000d74:	0800522c 	.word	0x0800522c
 8000d78:	08005234 	.word	0x08005234
 8000d7c:	08005238 	.word	0x08005238
 8000d80:	20000040 	.word	0x20000040
 8000d84:	2000003c 	.word	0x2000003c
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	200019b8 	.word	0x200019b8
 8000d90:	40010800 	.word	0x40010800
				case (WTT_SUPPORT_HEATER): {
						osDelay(10000);
 8000d94:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d98:	f001 fe68 	bl	8002a6c <osDelay>
						ret_code = WBUS_TX((char*)WB_STARTSUPP_CMD,sizeof(WB_STARTSUPP_CMD),(char*)WB_STARTSUPP_CMD_ACK,sizeof(WB_STARTSUPP_CMD_ACK),3,500);
 8000d9c:	f107 020c 	add.w	r2, r7, #12
 8000da0:	f107 0014 	add.w	r0, r7, #20
 8000da4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2303      	movs	r3, #3
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2305      	movs	r3, #5
 8000db0:	2106      	movs	r1, #6
 8000db2:	f000 f8ab 	bl	8000f0c <WBUS_TX>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						if(ret_code==0) { // WTT not respond
 8000dbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <WEBASTO_Proc+0x2d2>
								//info_led_light(500);
								//info_led_light(500);
								//info_led_light(500);
								WTT_Change_state(WTT_STOPHEATER);
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f000 fa01 	bl	80011cc <WTT_Change_state>
						}
						if((button_press() == 1 || button_press() == 2) && WEBASTO_WORK_PARAM.WorkStatus==1)
 8000dca:	f7ff fe3d 	bl	8000a48 <button_press>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d004      	beq.n	8000dde <WEBASTO_Proc+0x2e6>
 8000dd4:	f7ff fe38 	bl	8000a48 <button_press>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d112      	bne.n	8000e04 <WEBASTO_Proc+0x30c>
 8000dde:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d10e      	bne.n	8000e04 <WEBASTO_Proc+0x30c>
					    {
							WTT_Change_state(WTT_STOPHEATER);
 8000de6:	2005      	movs	r0, #5
 8000de8:	f000 f9f0 	bl	80011cc <WTT_Change_state>
							//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET); //led on
							//osDelay(1000);
							//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_RESET); //led on
							//osDelay(1000);
							info_led_light(500);
 8000dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df0:	f7ff fe5e 	bl	8000ab0 <info_led_light>
							info_led_light(500);
 8000df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df8:	f7ff fe5a 	bl	8000ab0 <info_led_light>
							info_led_light(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e00:	f7ff fe56 	bl	8000ab0 <info_led_light>
							//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET); //led on

						}
						if(WEBASTO_WORK_PARAM.CurrT > 50)
 8000e04:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000e06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000e0a:	2b32      	cmp	r3, #50	; 0x32
 8000e0c:	dd0a      	ble.n	8000e24 <WEBASTO_Proc+0x32c>
						{
							WTT_Change_state(WTT_STOPHEATER);
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f000 f9dc 	bl	80011cc <WTT_Change_state>
							info_led_light(500);
 8000e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e18:	f7ff fe4a 	bl	8000ab0 <info_led_light>
							info_led_light(1000);
 8000e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e20:	f7ff fe46 	bl	8000ab0 <info_led_light>
							//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET); //led off
						}
						if((double)WEBASTO_WORK_PARAM.CurrUakb/1000 < 12.3)
 8000e24:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000e26:	88db      	ldrh	r3, [r3, #6]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fab3 	bl	8000394 <__aeabi_ui2d>
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b34      	ldr	r3, [pc, #208]	; (8000f04 <WEBASTO_Proc+0x40c>)
 8000e34:	f7ff fc52 	bl	80006dc <__aeabi_ddiv>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	460c      	mov	r4, r1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	4621      	mov	r1, r4
 8000e40:	a32d      	add	r3, pc, #180	; (adr r3, 8000ef8 <WEBASTO_Proc+0x400>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff fd91 	bl	800096c <__aeabi_dcmplt>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00e      	beq.n	8000e6e <WEBASTO_Proc+0x376>
						{
							WTT_Change_state(WTT_STOPHEATER);
 8000e50:	2005      	movs	r0, #5
 8000e52:	f000 f9bb 	bl	80011cc <WTT_Change_state>
							info_led_light(500);
 8000e56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e5a:	f7ff fe29 	bl	8000ab0 <info_led_light>
							info_led_light(1000);
 8000e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e62:	f7ff fe25 	bl	8000ab0 <info_led_light>
							info_led_light(2000);
 8000e66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e6a:	f7ff fe21 	bl	8000ab0 <info_led_light>
							//HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET); //led off
						}

						WEBASTO_WORK_PARAM.CurrTimeWork = WEBASTO_WORK_PARAM.CurrTimeWork-10;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000e70:	885b      	ldrh	r3, [r3, #2]
 8000e72:	3b0a      	subs	r3, #10
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000e78:	805a      	strh	r2, [r3, #2]
						if(WEBASTO_WORK_PARAM.CurrTimeWork<=20)
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000e7c:	885b      	ldrh	r3, [r3, #2]
 8000e7e:	2b14      	cmp	r3, #20
 8000e80:	d803      	bhi.n	8000e8a <WEBASTO_Proc+0x392>
								WTT_Change_state(WTT_STOPHEATER);
 8000e82:	2005      	movs	r0, #5
 8000e84:	f000 f9a2 	bl	80011cc <WTT_Change_state>
						else {
								WTT_Change_state(WTT_GET_PARAM); //request last param's V T
								osDelay(200);
								}

						}	break;
 8000e88:	e032      	b.n	8000ef0 <WEBASTO_Proc+0x3f8>
								WTT_Change_state(WTT_GET_PARAM); //request last param's V T
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 f99e 	bl	80011cc <WTT_Change_state>
								osDelay(200);
 8000e90:	20c8      	movs	r0, #200	; 0xc8
 8000e92:	f001 fdeb 	bl	8002a6c <osDelay>
						}	break;
 8000e96:	e02b      	b.n	8000ef0 <WEBASTO_Proc+0x3f8>

				case (WTT_STOPHEATER): {
					//TODO помпу надо дальше крутить!!!!!
						HAL_GPIO_WritePin(rele_pomp_GPIO_Port, rele_pomp_Pin, GPIO_PIN_SET); //rele off
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <WEBASTO_Proc+0x410>)
 8000e9e:	f000 fe46 	bl	8001b2e <HAL_GPIO_WritePin>
						osDelay(1000);
 8000ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea6:	f001 fde1 	bl	8002a6c <osDelay>
						// Stop heater
						ret_code = WBUS_TX((char*)WB_STOP_CMD,sizeof(WB_STOP_CMD),(char*)WB_STOP_CMD_ACK,sizeof(WB_STOP_CMD_ACK),3,500);
 8000eaa:	1d3a      	adds	r2, r7, #4
 8000eac:	f107 0008 	add.w	r0, r7, #8
 8000eb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2304      	movs	r3, #4
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	f000 f825 	bl	8000f0c <WBUS_TX>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						if(WEBASTO_WORK_PARAM.StopCMD==1) WEBASTO_WORK_PARAM.StopCMD=0;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000eca:	7a9b      	ldrb	r3, [r3, #10]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d102      	bne.n	8000ed6 <WEBASTO_Proc+0x3de>
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	729a      	strb	r2, [r3, #10]
						WEBASTO_WORK_PARAM.WorkStatus=0;
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <WEBASTO_Proc+0x408>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	711a      	strb	r2, [r3, #4]

						HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET); //led off
 8000edc:	2201      	movs	r2, #1
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <WEBASTO_Proc+0x410>)
 8000ee2:	f000 fe24 	bl	8001b2e <HAL_GPIO_WritePin>

						WTT_Change_state(WTT_POWER_DOWN);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f970 	bl	80011cc <WTT_Change_state>
						}	break;
 8000eec:	e000      	b.n	8000ef0 <WEBASTO_Proc+0x3f8>
						} break;
 8000eee:	bf00      	nop
				}
}
 8000ef0:	bf00      	nop
 8000ef2:	3744      	adds	r7, #68	; 0x44
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	9999999a 	.word	0x9999999a
 8000efc:	40289999 	.word	0x40289999
 8000f00:	20000000 	.word	0x20000000
 8000f04:	408f4000 	.word	0x408f4000
 8000f08:	40010800 	.word	0x40010800

08000f0c <WBUS_TX>:
uint8_t WBUS_TX(char* wbus_tx_cmd,uint8_t tx_len,char* ack, uint8_t ack_len, uint8_t rx_try_cnt, uint16_t tx_try_delay) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0a2      	sub	sp, #136	; 0x88
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	461a      	mov	r2, r3
 8000f18:	460b      	mov	r3, r1
 8000f1a:	72fb      	strb	r3, [r7, #11]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	72bb      	strb	r3, [r7, #10]
		char WB_ACK[100]={0,0,0,0,0,0,0,0,0,0};
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	2264      	movs	r2, #100	; 0x64
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 f959 	bl	80051e0 <memset>
		char parazit_byte;
		uint16_t i;
		uint8_t mismatch=0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		uint8_t wbus_rx_done=0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		uint8_t result=0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

		static uint32_t tx_delay_tmp;

		while(tx_delay_tmp>HAL_GetTick()) {
 8000f40:	e002      	b.n	8000f48 <WBUS_TX+0x3c>
				//taskYIELD();
				osDelay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f001 fd92 	bl	8002a6c <osDelay>
		while(tx_delay_tmp>HAL_GetTick()) {
 8000f48:	f000 fb92 	bl	8001670 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <WBUS_TX+0x16c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d3f5      	bcc.n	8000f42 <WBUS_TX+0x36>
				}

		do {
				for(int i=0;i<sizeof(WB_ACK);i++) WB_ACK[i]=0; // clear buf
 8000f56:	2300      	movs	r3, #0
 8000f58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f5a:	e008      	b.n	8000f6e <WBUS_TX+0x62>
 8000f5c:	f107 0218 	add.w	r2, r7, #24
 8000f60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f62:	4413      	add	r3, r2
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f70:	2b63      	cmp	r3, #99	; 0x63
 8000f72:	d9f3      	bls.n	8000f5c <WBUS_TX+0x50>

				HAL_UART_Transmit(&huart1,(uint8_t*)wbus_tx_cmd,tx_len,100);
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	2364      	movs	r3, #100	; 0x64
 8000f7a:	68f9      	ldr	r1, [r7, #12]
 8000f7c:	483f      	ldr	r0, [pc, #252]	; (800107c <WBUS_TX+0x170>)
 8000f7e:	f001 fa58 	bl	8002432 <HAL_UART_Transmit>
				if(ack_len==0) {result=1; break;} // out of cycle
 8000f82:	7abb      	ldrb	r3, [r7, #10]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d103      	bne.n	8000f90 <WBUS_TX+0x84>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000f8e:	e057      	b.n	8001040 <WBUS_TX+0x134>
				if(--rx_try_cnt==0) {result=0; break;} // out of cycle
 8000f90:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8000f94:	3b01      	subs	r3, #1
 8000f96:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8000f9a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <WBUS_TX+0x9e>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000fa8:	e04a      	b.n	8001040 <WBUS_TX+0x134>

				HAL_UART_Receive(&huart1,(uint8_t*)&parazit_byte,1,1);
 8000faa:	f107 0117 	add.w	r1, r7, #23
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4832      	ldr	r0, [pc, #200]	; (800107c <WBUS_TX+0x170>)
 8000fb4:	f001 facf 	bl	8002556 <HAL_UART_Receive>
				HAL_UART_Receive(&huart1,(uint8_t*)WB_ACK,ack_len,200);
 8000fb8:	7abb      	ldrb	r3, [r7, #10]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f107 0118 	add.w	r1, r7, #24
 8000fc0:	23c8      	movs	r3, #200	; 0xc8
 8000fc2:	482e      	ldr	r0, [pc, #184]	; (800107c <WBUS_TX+0x170>)
 8000fc4:	f001 fac7 	bl	8002556 <HAL_UART_Receive>
				for(i=0;i<ack_len;i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8000fce:	e017      	b.n	8001000 <WBUS_TX+0xf4>
						if(WB_ACK[i] != ack[i]) mismatch++;
 8000fd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000fd4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000fd8:	4413      	add	r3, r2
 8000fda:	f813 2c70 	ldrb.w	r2, [r3, #-112]
 8000fde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d004      	beq.n	8000ff6 <WBUS_TX+0xea>
 8000fec:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
				for(i=0;i<ack_len;i++) {
 8000ff6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001000:	7abb      	ldrb	r3, [r7, #10]
 8001002:	b29b      	uxth	r3, r3
 8001004:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001008:	429a      	cmp	r2, r3
 800100a:	d3e1      	bcc.n	8000fd0 <WBUS_TX+0xc4>
						}
				if (mismatch>0) {
 800100c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001010:	2b00      	cmp	r3, #0
 8001012:	d008      	beq.n	8001026 <WBUS_TX+0x11a>
						wbus_rx_done=0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
						osDelay(tx_try_delay);
 800101a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fd24 	bl	8002a6c <osDelay>
 8001024:	e005      	b.n	8001032 <WBUS_TX+0x126>
						}
				else	{
						wbus_rx_done=1;
 8001026:	2301      	movs	r3, #1
 8001028:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
						result=1;
 800102c:	2301      	movs	r3, #1
 800102e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
						}
				mismatch=0;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

				} while (wbus_rx_done==0);
 8001038:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800103c:	2b00      	cmp	r3, #0
 800103e:	d08a      	beq.n	8000f56 <WBUS_TX+0x4a>

		tx_delay_tmp = (HAL_GetTick()<0xFFFFFFFF-WBUS_TX_DELAY) ? (HAL_GetTick() + WBUS_TX_DELAY) : (0); // set pause between w-bus sending
 8001040:	f000 fb16 	bl	8001670 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	43db      	mvns	r3, r3
 800104a:	429a      	cmp	r2, r3
 800104c:	d205      	bcs.n	800105a <WBUS_TX+0x14e>
 800104e:	f000 fb0f 	bl	8001670 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	4413      	add	r3, r2
 8001058:	e000      	b.n	800105c <WBUS_TX+0x150>
 800105a:	2300      	movs	r3, #0
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <WBUS_TX+0x16c>)
 800105e:	6013      	str	r3, [r2, #0]
		if(result==1) return 1;
 8001060:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <WBUS_TX+0x160>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <WBUS_TX+0x162>
		else return 0; //
 800106c:	2300      	movs	r3, #0
		}
 800106e:	4618      	mov	r0, r3
 8001070:	3788      	adds	r7, #136	; 0x88
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000a4 	.word	0x200000a4
 800107c:	20001a80 	.word	0x20001a80

08001080 <WBUS_TX_EXT>:

uint8_t WBUS_TX_EXT(char* wbus_tx_cmd,uint8_t tx_len,char* ack, uint8_t ack_len, uint8_t rx_try_cnt, uint16_t tx_try_delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	461a      	mov	r2, r3
 800108c:	460b      	mov	r3, r1
 800108e:	72fb      	strb	r3, [r7, #11]
 8001090:	4613      	mov	r3, r2
 8001092:	72bb      	strb	r3, [r7, #10]
		char parazit_byte;
		//uint16_t i;
//		uint8_t mismatch=0;
		uint8_t wbus_rx_done=0;
 8001094:	2300      	movs	r3, #0
 8001096:	77fb      	strb	r3, [r7, #31]
		static uint32_t tx_delay_tmp;
		uint8_t result=0;
 8001098:	2300      	movs	r3, #0
 800109a:	77bb      	strb	r3, [r7, #30]

		while(tx_delay_tmp>HAL_GetTick()) {
 800109c:	e002      	b.n	80010a4 <WBUS_TX_EXT+0x24>
				osDelay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f001 fce4 	bl	8002a6c <osDelay>
		while(tx_delay_tmp>HAL_GetTick()) {
 80010a4:	f000 fae4 	bl	8001670 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <WBUS_TX_EXT+0xf0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3f5      	bcc.n	800109e <WBUS_TX_EXT+0x1e>
				}

		do {
				for(int i=0;i<sizeof(WBUS_ACK_EXT);i++) WBUS_ACK_EXT[i]=0; // clear buf
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	e007      	b.n	80010c8 <WBUS_TX_EXT+0x48>
 80010b8:	4a2e      	ldr	r2, [pc, #184]	; (8001174 <WBUS_TX_EXT+0xf4>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4413      	add	r3, r2
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2bc7      	cmp	r3, #199	; 0xc7
 80010cc:	d9f4      	bls.n	80010b8 <WBUS_TX_EXT+0x38>
				HAL_UART_Transmit(&huart1,(uint8_t*)wbus_tx_cmd,tx_len,100);
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	4828      	ldr	r0, [pc, #160]	; (8001178 <WBUS_TX_EXT+0xf8>)
 80010d8:	f001 f9ab 	bl	8002432 <HAL_UART_Transmit>

				if(ack_len==0) {result=1; break;} // out of cycle
 80010dc:	7abb      	ldrb	r3, [r7, #10]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <WBUS_TX_EXT+0x68>
 80010e2:	2301      	movs	r3, #1
 80010e4:	77bb      	strb	r3, [r7, #30]
 80010e6:	e028      	b.n	800113a <WBUS_TX_EXT+0xba>
				if(--rx_try_cnt==0) {result=0; break;} // out of cycle
 80010e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010ec:	3b01      	subs	r3, #1
 80010ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80010f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <WBUS_TX_EXT+0x80>
 80010fa:	2300      	movs	r3, #0
 80010fc:	77bb      	strb	r3, [r7, #30]
 80010fe:	e01c      	b.n	800113a <WBUS_TX_EXT+0xba>



				HAL_UART_Receive(&huart1,(uint8_t*)&parazit_byte,1,1); // rx parasite byte
 8001100:	f107 0117 	add.w	r1, r7, #23
 8001104:	2301      	movs	r3, #1
 8001106:	2201      	movs	r2, #1
 8001108:	481b      	ldr	r0, [pc, #108]	; (8001178 <WBUS_TX_EXT+0xf8>)
 800110a:	f001 fa24 	bl	8002556 <HAL_UART_Receive>
				if(HAL_UART_Receive(&huart1,(uint8_t*)WBUS_ACK_EXT,ack_len,200)==HAL_OK) {
 800110e:	7abb      	ldrb	r3, [r7, #10]
 8001110:	b29a      	uxth	r2, r3
 8001112:	23c8      	movs	r3, #200	; 0xc8
 8001114:	4917      	ldr	r1, [pc, #92]	; (8001174 <WBUS_TX_EXT+0xf4>)
 8001116:	4818      	ldr	r0, [pc, #96]	; (8001178 <WBUS_TX_EXT+0xf8>)
 8001118:	f001 fa1d 	bl	8002556 <HAL_UART_Receive>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d104      	bne.n	800112c <WBUS_TX_EXT+0xac>
				//if(strlen(WBUS_ACK_EXT) == ack_len) {
						wbus_rx_done=1;
 8001122:	2301      	movs	r3, #1
 8001124:	77fb      	strb	r3, [r7, #31]
						result=1;
 8001126:	2301      	movs	r3, #1
 8001128:	77bb      	strb	r3, [r7, #30]
 800112a:	e003      	b.n	8001134 <WBUS_TX_EXT+0xb4>
						}
				else osDelay(tx_try_delay);
 800112c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fc9c 	bl	8002a6c <osDelay>

		} while (wbus_rx_done==0);
 8001134:	7ffb      	ldrb	r3, [r7, #31]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0bb      	beq.n	80010b2 <WBUS_TX_EXT+0x32>

		tx_delay_tmp = (HAL_GetTick()<0xFFFFFFFF-WBUS_TX_DELAY) ? (HAL_GetTick() + WBUS_TX_DELAY) : (0); // set pause between w-bus sending
 800113a:	f000 fa99 	bl	8001670 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	43db      	mvns	r3, r3
 8001144:	429a      	cmp	r2, r3
 8001146:	d205      	bcs.n	8001154 <WBUS_TX_EXT+0xd4>
 8001148:	f000 fa92 	bl	8001670 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	2364      	movs	r3, #100	; 0x64
 8001150:	4413      	add	r3, r2
 8001152:	e000      	b.n	8001156 <WBUS_TX_EXT+0xd6>
 8001154:	2300      	movs	r3, #0
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <WBUS_TX_EXT+0xf0>)
 8001158:	6013      	str	r3, [r2, #0]
		if(result==1) return 1;
 800115a:	7fbb      	ldrb	r3, [r7, #30]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <WBUS_TX_EXT+0xe4>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <WBUS_TX_EXT+0xe6>
		else return 0; //
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000a8 	.word	0x200000a8
 8001174:	200019b8 	.word	0x200019b8
 8001178:	20001a80 	.word	0x20001a80

0800117c <USART1_UART_Init_8E1>:

void USART1_UART_Init_8E1(uint16_t speed)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <USART1_UART_Init_8E1+0x48>)
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <USART1_UART_Init_8E1+0x4c>)
 800118a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = speed;
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <USART1_UART_Init_8E1+0x48>)
 8001190:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <USART1_UART_Init_8E1+0x48>)
 8001194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001198:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <USART1_UART_Init_8E1+0x48>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <USART1_UART_Init_8E1+0x48>)
 80011a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <USART1_UART_Init_8E1+0x48>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <USART1_UART_Init_8E1+0x48>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <USART1_UART_Init_8E1+0x48>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20001a80 	.word	0x20001a80
 80011c8:	40013800 	.word	0x40013800

080011cc <WTT_Change_state>:

void WTT_Change_state(enum eWTT_State newstate)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
		WTT_State = newstate;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <WTT_Change_state+0x1c>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	7013      	strb	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000003c 	.word	0x2000003c

080011ec <main>:


int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  HAL_Init();
 80011f0:	f000 f9e6 	bl	80015c0 <HAL_Init>
  SystemClock_Config();
 80011f4:	f000 f818 	bl	8001228 <SystemClock_Config>
  MX_GPIO_Init();
 80011f8:	f000 f882 	bl	8001300 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011fc:	f000 f856 	bl	80012ac <MX_USART1_UART_Init>
  osKernelInitialize();
 8001200:	f001 fb24 	bl	800284c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(webasto_func, NULL, &defaultTask_attributes);
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <main+0x30>)
 8001206:	2100      	movs	r1, #0
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <main+0x34>)
 800120a:	f001 fb85 	bl	8002918 <osThreadNew>
 800120e:	4602      	mov	r2, r0
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <main+0x38>)
 8001212:	601a      	str	r2, [r3, #0]
  osKernelStart();
 8001214:	f001 fb4c 	bl	80028b0 <osKernelStart>

  while (1)
 8001218:	e7fe      	b.n	8001218 <main+0x2c>
 800121a:	bf00      	nop
 800121c:	08005268 	.word	0x08005268
 8001220:	080013d9 	.word	0x080013d9
 8001224:	200019b4 	.word	0x200019b4

08001228 <SystemClock_Config>:
  {
  }
}

void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	2228      	movs	r2, #40	; 0x28
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f003 ffd2 	bl	80051e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124e:	2301      	movs	r3, #1
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001252:	2310      	movs	r3, #16
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800125a:	2300      	movs	r3, #0
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800125e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fc79 	bl	8001b60 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001274:	f000 f8ce 	bl	8001414 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2102      	movs	r1, #2
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fee4 	bl	8002060 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800129e:	f000 f8b9 	bl	8001414 <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3740      	adds	r7, #64	; 0x40
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_USART1_UART_Init+0x50>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 11500;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012b8:	f642 42ec 	movw	r2, #11500	; 0x2cec
 80012bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012e4:	f001 f858 	bl	8002398 <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ee:	f000 f891 	bl	8001414 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20001a80 	.word	0x20001a80
 80012fc:	40013800 	.word	0x40013800

08001300 <MX_GPIO_Init>:
void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_GPIO_Init+0xcc>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <MX_GPIO_Init+0xcc>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_GPIO_Init+0xcc>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_GPIO_Init+0xcc>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a26      	ldr	r2, [pc, #152]	; (80013cc <MX_GPIO_Init+0xcc>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_GPIO_Init+0xcc>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_GPIO_Init+0xcc>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <MX_GPIO_Init+0xcc>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_GPIO_Init+0xcc>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_info_GPIO_Port, led_info_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001362:	481b      	ldr	r0, [pc, #108]	; (80013d0 <MX_GPIO_Init+0xd0>)
 8001364:	f000 fbe3 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_on_off_Pin|rele_pomp_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	210c      	movs	r1, #12
 800136c:	4819      	ldr	r0, [pc, #100]	; (80013d4 <MX_GPIO_Init+0xd4>)
 800136e:	f000 fbde 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_info_Pin */
  GPIO_InitStruct.Pin = led_info_Pin;
 8001372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_info_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_GPIO_Init+0xd0>)
 800138c:	f000 fa5e 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_on_off_Pin */
  GPIO_InitStruct.Pin = button_on_off_Pin;
 8001390:	2302      	movs	r3, #2
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_on_off_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0xd4>)
 80013a4:	f000 fa52 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : led_on_off_Pin rele_pomp_Pin */
  GPIO_InitStruct.Pin = led_on_off_Pin|rele_pomp_Pin;
 80013a8:	230c      	movs	r3, #12
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_GPIO_Init+0xd4>)
 80013c0:	f000 fa44 	bl	800184c <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40011000 	.word	0x40011000
 80013d4:	40010800 	.word	0x40010800

080013d8 <webasto_func>:

void webasto_func(void *argument)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  HAL_GPIO_WritePin(led_info_GPIO_Port, led_info_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <webasto_func+0x34>)
 80013e8:	f000 fba1 	bl	8001b2e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_on_off_GPIO_Port, led_on_off_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2104      	movs	r1, #4
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <webasto_func+0x38>)
 80013f2:	f000 fb9c 	bl	8001b2e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(rele_pomp_GPIO_Port, rele_pomp_Pin, GPIO_PIN_SET); //rele off
 80013f6:	2201      	movs	r2, #1
 80013f8:	2108      	movs	r1, #8
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <webasto_func+0x38>)
 80013fc:	f000 fb97 	bl	8001b2e <HAL_GPIO_WritePin>
	WEBASTO_Proc();
 8001400:	f7ff fb7a 	bl	8000af8 <WEBASTO_Proc>
    osDelay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f001 fb31 	bl	8002a6c <osDelay>
	  HAL_GPIO_WritePin(led_info_GPIO_Port, led_info_Pin, GPIO_PIN_SET);
 800140a:	e7e9      	b.n	80013e0 <webasto_func+0x8>
 800140c:	40011000 	.word	0x40011000
 8001410:	40010800 	.word	0x40010800

08001414 <Error_Handler>:
  }
}

void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
  __disable_irq();
  while (1)
 800141a:	e7fe      	b.n	800141a <Error_Handler+0x6>

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_MspInit+0x68>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_MspInit+0x68>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_MspInit+0x68>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_MspInit+0x68>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_MspInit+0x68>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_MspInit+0x68>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	210f      	movs	r1, #15
 8001456:	f06f 0001 	mvn.w	r0, #1
 800145a:	f000 f9ce 	bl	80017fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_MspInit+0x6c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_MspInit+0x6c>)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000

0800148c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_UART_MspInit+0x8c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d131      	bne.n	8001510 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_UART_MspInit+0x90>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a1a      	ldr	r2, [pc, #104]	; (800151c <HAL_UART_MspInit+0x90>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_UART_MspInit+0x90>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_UART_MspInit+0x90>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <HAL_UART_MspInit+0x90>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_UART_MspInit+0x90>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4619      	mov	r1, r3
 80014f0:	480b      	ldr	r0, [pc, #44]	; (8001520 <HAL_UART_MspInit+0x94>)
 80014f2:	f000 f9ab 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <HAL_UART_MspInit+0x94>)
 800150c:	f000 f99e 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40013800 	.word	0x40013800
 800151c:	40021000 	.word	0x40021000
 8001520:	40010800 	.word	0x40010800

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001552:	f000 f87b 	bl	800164c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001556:	f002 fe73 	bl	8004240 <xTaskGetSchedulerState>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	d001      	beq.n	8001564 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001560:	f003 fbba 	bl	8004cd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159a:	f7ff ffe5 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f003 fded 	bl	800517c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a2:	f7ff fe23 	bl	80011ec <main>
  bx lr
 80015a6:	4770      	bx	lr
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80015b0:	080052ac 	.word	0x080052ac
  ldr r2, =_sbss
 80015b4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80015b8:	20001b08 	.word	0x20001b08

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x28>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f907 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff ff1e 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f911 	bl	8001832 <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001628:	f000 f8e7 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000010 	.word	0x20000010
 8001644:	20000018 	.word	0x20000018
 8001648:	20000014 	.word	0x20000014

0800164c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x1c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x20>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a03      	ldr	r2, [pc, #12]	; (800166c <HAL_IncTick+0x20>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000018 	.word	0x20000018
 800166c:	20001ac4 	.word	0x20001ac4

08001670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <HAL_GetTick+0x10>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20001ac4 	.word	0x20001ac4

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c4:	f7ff ff90 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff49 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff5e 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff90 	bl	800173c <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffb0 	bl	80017a0 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e127      	b.n	8001ab0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8116 	bne.w	8001aaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b12      	cmp	r3, #18
 8001884:	d034      	beq.n	80018f0 <HAL_GPIO_Init+0xa4>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d80d      	bhi.n	80018a6 <HAL_GPIO_Init+0x5a>
 800188a:	2b02      	cmp	r3, #2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x9a>
 800188e:	2b02      	cmp	r3, #2
 8001890:	d804      	bhi.n	800189c <HAL_GPIO_Init+0x50>
 8001892:	2b00      	cmp	r3, #0
 8001894:	d031      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 8001896:	2b01      	cmp	r3, #1
 8001898:	d01c      	beq.n	80018d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800189a:	e048      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800189c:	2b03      	cmp	r3, #3
 800189e:	d043      	beq.n	8001928 <HAL_GPIO_Init+0xdc>
 80018a0:	2b11      	cmp	r3, #17
 80018a2:	d01b      	beq.n	80018dc <HAL_GPIO_Init+0x90>
          break;
 80018a4:	e043      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018a6:	4a89      	ldr	r2, [pc, #548]	; (8001acc <HAL_GPIO_Init+0x280>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d026      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018ac:	4a87      	ldr	r2, [pc, #540]	; (8001acc <HAL_GPIO_Init+0x280>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d806      	bhi.n	80018c0 <HAL_GPIO_Init+0x74>
 80018b2:	4a87      	ldr	r2, [pc, #540]	; (8001ad0 <HAL_GPIO_Init+0x284>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d020      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018b8:	4a86      	ldr	r2, [pc, #536]	; (8001ad4 <HAL_GPIO_Init+0x288>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01d      	beq.n	80018fa <HAL_GPIO_Init+0xae>
          break;
 80018be:	e036      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018c0:	4a85      	ldr	r2, [pc, #532]	; (8001ad8 <HAL_GPIO_Init+0x28c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018c6:	4a85      	ldr	r2, [pc, #532]	; (8001adc <HAL_GPIO_Init+0x290>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d016      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018cc:	4a84      	ldr	r2, [pc, #528]	; (8001ae0 <HAL_GPIO_Init+0x294>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0xae>
          break;
 80018d2:	e02c      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e028      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	3304      	adds	r3, #4
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e023      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	3308      	adds	r3, #8
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e01e      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	330c      	adds	r3, #12
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e019      	b.n	800192e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e012      	b.n	800192e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e008      	b.n	800192e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2bff      	cmp	r3, #255	; 0xff
 8001932:	d801      	bhi.n	8001938 <HAL_GPIO_Init+0xec>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	e001      	b.n	800193c <HAL_GPIO_Init+0xf0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3304      	adds	r3, #4
 800193c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	d802      	bhi.n	800194a <HAL_GPIO_Init+0xfe>
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x104>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3b08      	subs	r3, #8
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	210f      	movs	r1, #15
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	6a39      	ldr	r1, [r7, #32]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	431a      	orrs	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8096 	beq.w	8001aaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197e:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001996:	4a54      	ldr	r2, [pc, #336]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4b      	ldr	r2, [pc, #300]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x19e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4a      	ldr	r2, [pc, #296]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x19a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a49      	ldr	r2, [pc, #292]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x196>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x192>
 80019da:	2303      	movs	r3, #3
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019de:	2304      	movs	r3, #4
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019ea:	2300      	movs	r3, #0
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fc:	493a      	ldr	r1, [pc, #232]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4938      	ldr	r1, [pc, #224]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
 8001a22:	e006      	b.n	8001a32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a24:	4b35      	ldr	r3, [pc, #212]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4933      	ldr	r1, [pc, #204]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	492e      	ldr	r1, [pc, #184]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4929      	ldr	r1, [pc, #164]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	4924      	ldr	r1, [pc, #144]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	491f      	ldr	r1, [pc, #124]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	491a      	ldr	r1, [pc, #104]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60cb      	str	r3, [r1, #12]
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4915      	ldr	r1, [pc, #84]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f47f aed0 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	372c      	adds	r7, #44	; 0x2c
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10110000 	.word	0x10110000
 8001ad4:	10120000 	.word	0x10120000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40010800 	.word	0x40010800
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40011000 	.word	0x40011000
 8001af8:	40011400 	.word	0x40011400
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e001      	b.n	8001b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3e:	787b      	ldrb	r3, [r7, #1]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b44:	887a      	ldrh	r2, [r7, #2]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b4a:	e003      	b.n	8001b54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	041a      	lsls	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e26c      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8087 	beq.w	8001c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b80:	4b92      	ldr	r3, [pc, #584]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d112      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5e>
 8001b98:	4b8c      	ldr	r3, [pc, #560]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d06c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x12c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d168      	bne.n	8001c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e246      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x76>
 8001bc8:	4b80      	ldr	r3, [pc, #512]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a7f      	ldr	r2, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e02e      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x98>
 8001bde:	4b7b      	ldr	r3, [pc, #492]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7a      	ldr	r2, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b78      	ldr	r3, [pc, #480]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a77      	ldr	r2, [pc, #476]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0xbc>
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a71      	ldr	r2, [pc, #452]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6e      	ldr	r2, [pc, #440]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001c1c:	4b6b      	ldr	r3, [pc, #428]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6a      	ldr	r2, [pc, #424]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a67      	ldr	r2, [pc, #412]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fd18 	bl	8001670 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fd14 	bl	8001670 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1fa      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xe4>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fd04 	bl	8001670 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fd00 	bl	8001670 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1e6      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x10c>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d063      	beq.n	8001d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9a:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d11c      	bne.n	8001cec <HAL_RCC_OscConfig+0x18c>
 8001cb2:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x176>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e1ba      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4939      	ldr	r1, [pc, #228]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e03a      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fcb9 	bl	8001670 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff fcb5 	bl	8001670 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e19b      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4927      	ldr	r1, [pc, #156]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fc98 	bl	8001670 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff fc94 	bl	8001670 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e17a      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d03a      	beq.n	8001de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d019      	beq.n	8001daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_RCC_OscConfig+0x274>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fc78 	bl	8001670 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff fc74 	bl	8001670 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e15a      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f000 fada 	bl	800235c <RCC_Delay>
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_RCC_OscConfig+0x274>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7ff fc5e 	bl	8001670 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db6:	e00f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff fc5a 	bl	8001670 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d908      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e140      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	42420000 	.word	0x42420000
 8001dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	4b9e      	ldr	r3, [pc, #632]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1e9      	bne.n	8001db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a6 	beq.w	8001f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4b97      	ldr	r3, [pc, #604]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10d      	bne.n	8001e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b94      	ldr	r3, [pc, #592]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a93      	ldr	r2, [pc, #588]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b91      	ldr	r3, [pc, #580]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b8e      	ldr	r3, [pc, #568]	; (8002058 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	4b8b      	ldr	r3, [pc, #556]	; (8002058 <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a8a      	ldr	r2, [pc, #552]	; (8002058 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fc1b 	bl	8001670 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff fc17 	bl	8001670 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b64      	cmp	r3, #100	; 0x64
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0fd      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_RCC_OscConfig+0x4f8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x312>
 8001e64:	4b7b      	ldr	r3, [pc, #492]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a7a      	ldr	r2, [pc, #488]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	e02d      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x334>
 8001e7a:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a75      	ldr	r2, [pc, #468]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	4b73      	ldr	r3, [pc, #460]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a72      	ldr	r2, [pc, #456]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	e01c      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x356>
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a6c      	ldr	r2, [pc, #432]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a69      	ldr	r2, [pc, #420]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e00b      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001eb6:	4b67      	ldr	r3, [pc, #412]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a66      	ldr	r2, [pc, #408]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b64      	ldr	r3, [pc, #400]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a63      	ldr	r2, [pc, #396]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fbcb 	bl	8001670 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff fbc7 	bl	8001670 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0ab      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	4b57      	ldr	r3, [pc, #348]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ee      	beq.n	8001ede <HAL_RCC_OscConfig+0x37e>
 8001f00:	e014      	b.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff fbb5 	bl	8001670 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7ff fbb1 	bl	8001670 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e095      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ee      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8081 	beq.w	800204a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f48:	4b42      	ldr	r3, [pc, #264]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d061      	beq.n	8002018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d146      	bne.n	8001fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_OscConfig+0x4fc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fb85 	bl	8001670 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff fb81 	bl	8001670 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e067      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f92:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	492d      	ldr	r1, [pc, #180]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a19      	ldr	r1, [r3, #32]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	4927      	ldr	r1, [pc, #156]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_OscConfig+0x4fc>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fb55 	bl	8001670 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff fb51 	bl	8001670 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e037      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x46a>
 8001fe8:	e02f      	b.n	800204a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_RCC_OscConfig+0x4fc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fb3e 	bl	8001670 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff fb3a 	bl	8001670 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e020      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x498>
 8002016:	e018      	b.n	800204a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e013      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	429a      	cmp	r2, r3
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	42420060 	.word	0x42420060

08002060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d0      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4965      	ldr	r1, [pc, #404]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d040      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e073      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4936      	ldr	r1, [pc, #216]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff fa8e 	bl	8001670 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff fa8a 	bl	8001670 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e053      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d210      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4601      	mov	r1, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	fa21 f303 	lsr.w	r3, r1, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1cc>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f9ec 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	0800528c 	.word	0x0800528c
 800222c:	20000010 	.word	0x20000010
 8002230:	20000014 	.word	0x20000014

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b490      	push	{r4, r7}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800223c:	1d3c      	adds	r4, r7, #4
 800223e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x40>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x46>
 8002272:	e02d      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	e02d      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002286:	4413      	add	r3, r2
 8002288:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800228c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c5b      	lsrs	r3, r3, #17
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022a6:	4413      	add	r3, r2
 80022a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022b2:	fb02 f203 	mul.w	r2, r2, r3
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	e004      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	623b      	str	r3, [r7, #32]
      break;
 80022ce:	e002      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d2:	623b      	str	r3, [r7, #32]
      break;
 80022d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d6:	6a3b      	ldr	r3, [r7, #32]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc90      	pop	{r4, r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	0800523c 	.word	0x0800523c
 80022e8:	0800524c 	.word	0x0800524c
 80022ec:	40021000 	.word	0x40021000
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	003d0900 	.word	0x003d0900

080022f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <HAL_RCC_GetHCLKFreq+0x10>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000010 	.word	0x20000010

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002310:	f7ff fff2 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 8002314:	4601      	mov	r1, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4a03      	ldr	r2, [pc, #12]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	0800529c 	.word	0x0800529c

08002334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002338:	f7ff ffde 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 800233c:	4601      	mov	r1, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	0adb      	lsrs	r3, r3, #11
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	0800529c 	.word	0x0800529c

0800235c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <RCC_Delay+0x34>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <RCC_Delay+0x38>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0a5b      	lsrs	r3, r3, #9
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002378:	bf00      	nop
  }
  while (Delay --);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	60fa      	str	r2, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f9      	bne.n	8002378 <RCC_Delay+0x1c>
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000010 	.word	0x20000010
 8002394:	10624dd3 	.word	0x10624dd3

08002398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e03f      	b.n	800242a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff f864 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	; 0x24
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f9a7 	bl	8002730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b08a      	sub	sp, #40	; 0x28
 8002436:	af02      	add	r7, sp, #8
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b20      	cmp	r3, #32
 8002450:	d17c      	bne.n	800254c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_UART_Transmit+0x2c>
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e075      	b.n	800254e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_UART_Transmit+0x3e>
 800246c:	2302      	movs	r3, #2
 800246e:	e06e      	b.n	800254e <HAL_UART_Transmit+0x11c>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2221      	movs	r2, #33	; 0x21
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002486:	f7ff f8f3 	bl	8001670 <HAL_GetTick>
 800248a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a0:	d108      	bne.n	80024b4 <HAL_UART_Transmit+0x82>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e003      	b.n	80024bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024c4:	e02a      	b.n	800251c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f8e2 	bl	800269a <UART_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e036      	b.n	800254e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3302      	adds	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	e007      	b.n	800250e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1cf      	bne.n	80024c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	2140      	movs	r1, #64	; 0x40
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f8b2 	bl	800269a <UART_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e006      	b.n	800254e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800254c:	2302      	movs	r3, #2
  }
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b08a      	sub	sp, #40	; 0x28
 800255a:	af02      	add	r7, sp, #8
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b20      	cmp	r3, #32
 8002574:	f040 808c 	bne.w	8002690 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_UART_Receive+0x2e>
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e084      	b.n	8002692 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_UART_Receive+0x40>
 8002592:	2302      	movs	r3, #2
 8002594:	e07d      	b.n	8002692 <HAL_UART_Receive+0x13c>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2222      	movs	r2, #34	; 0x22
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b2:	f7ff f85d 	bl	8001670 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025cc:	d108      	bne.n	80025e0 <HAL_UART_Receive+0x8a>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	e003      	b.n	80025e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80025f0:	e043      	b.n	800267a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2120      	movs	r1, #32
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f84c 	bl	800269a <UART_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e042      	b.n	8002692 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	b29b      	uxth	r3, r3
 800261a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261e:	b29a      	uxth	r2, r3
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	3302      	adds	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	e01f      	b.n	800266c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002634:	d007      	beq.n	8002646 <HAL_UART_Receive+0xf0>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <HAL_UART_Receive+0xfe>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e008      	b.n	8002666 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002660:	b2da      	uxtb	r2, r3
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1b6      	bne.n	80025f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026aa:	e02c      	b.n	8002706 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b2:	d028      	beq.n	8002706 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <UART_WaitOnFlagUntilTimeout+0x30>
 80026ba:	f7fe ffd9 	bl	8001670 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d21d      	bcs.n	8002706 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026d8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e00f      	b.n	8002726 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4013      	ands	r3, r2
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	429a      	cmp	r2, r3
 8002722:	d0c3      	beq.n	80026ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800276a:	f023 030c 	bic.w	r3, r3, #12
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	430b      	orrs	r3, r1
 8002776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2c      	ldr	r2, [pc, #176]	; (8002844 <UART_SetConfig+0x114>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d103      	bne.n	80027a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002798:	f7ff fdcc 	bl	8002334 <HAL_RCC_GetPCLK2Freq>
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	e002      	b.n	80027a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027a0:	f7ff fdb4 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <UART_SetConfig+0x118>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	0119      	lsls	r1, r3, #4
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009a      	lsls	r2, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <UART_SetConfig+0x118>)
 80027de:	fba3 0302 	umull	r0, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2064      	movs	r0, #100	; 0x64
 80027e6:	fb00 f303 	mul.w	r3, r0, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	3332      	adds	r3, #50	; 0x32
 80027f0:	4a15      	ldr	r2, [pc, #84]	; (8002848 <UART_SetConfig+0x118>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fc:	4419      	add	r1, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fbb2 f2f3 	udiv	r2, r2, r3
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <UART_SetConfig+0x118>)
 8002816:	fba3 0302 	umull	r0, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2064      	movs	r0, #100	; 0x64
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <UART_SetConfig+0x118>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	440a      	add	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40013800 	.word	0x40013800
 8002848:	51eb851f 	.word	0x51eb851f

0800284c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002852:	f3ef 8305 	mrs	r3, IPSR
 8002856:	60bb      	str	r3, [r7, #8]
  return(result);
 8002858:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285e:	f3ef 8310 	mrs	r3, PRIMASK
 8002862:	607b      	str	r3, [r7, #4]
  return(result);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <osKernelInitialize+0x32>
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <osKernelInitialize+0x60>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d109      	bne.n	8002886 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002872:	f3ef 8311 	mrs	r3, BASEPRI
 8002876:	603b      	str	r3, [r7, #0]
  return(result);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800287e:	f06f 0305 	mvn.w	r3, #5
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e00c      	b.n	80028a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <osKernelInitialize+0x60>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <osKernelInitialize+0x60>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e002      	b.n	80028a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800289e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80028a0:	68fb      	ldr	r3, [r7, #12]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	200000ac 	.word	0x200000ac

080028b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b6:	f3ef 8305 	mrs	r3, IPSR
 80028ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80028bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10f      	bne.n	80028e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c2:	f3ef 8310 	mrs	r3, PRIMASK
 80028c6:	607b      	str	r3, [r7, #4]
  return(result);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <osKernelStart+0x32>
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <osKernelStart+0x64>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d109      	bne.n	80028ea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028d6:	f3ef 8311 	mrs	r3, BASEPRI
 80028da:	603b      	str	r3, [r7, #0]
  return(result);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80028e2:	f06f 0305 	mvn.w	r3, #5
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e00e      	b.n	8002908 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <osKernelStart+0x64>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <osKernelStart+0x64>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80028f8:	f001 f864 	bl	80039c4 <vTaskStartScheduler>
      stat = osOK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e002      	b.n	8002908 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002906:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002908:	68fb      	ldr	r3, [r7, #12]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200000ac 	.word	0x200000ac

08002918 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b092      	sub	sp, #72	; 0x48
 800291c:	af04      	add	r7, sp, #16
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002928:	f3ef 8305 	mrs	r3, IPSR
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 8094 	bne.w	8002a5e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002936:	f3ef 8310 	mrs	r3, PRIMASK
 800293a:	623b      	str	r3, [r7, #32]
  return(result);
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 808d 	bne.w	8002a5e <osThreadNew+0x146>
 8002944:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <osThreadNew+0x150>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d106      	bne.n	800295a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800294c:	f3ef 8311 	mrs	r3, BASEPRI
 8002950:	61fb      	str	r3, [r7, #28]
  return(result);
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 8082 	bne.w	8002a5e <osThreadNew+0x146>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d07e      	beq.n	8002a5e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002964:	2318      	movs	r3, #24
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002968:	2300      	movs	r3, #0
 800296a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800296c:	f107 031b 	add.w	r3, r7, #27
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d045      	beq.n	8002a0a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <osThreadNew+0x74>
        name = attr->name;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <osThreadNew+0x9a>
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	2b38      	cmp	r3, #56	; 0x38
 80029a4:	d805      	bhi.n	80029b2 <osThreadNew+0x9a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <osThreadNew+0x9e>
        return (NULL);
 80029b2:	2300      	movs	r3, #0
 80029b4:	e054      	b.n	8002a60 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00e      	beq.n	80029ec <osThreadNew+0xd4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b5b      	cmp	r3, #91	; 0x5b
 80029d4:	d90a      	bls.n	80029ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <osThreadNew+0xd4>
        mem = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ea:	e010      	b.n	8002a0e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10c      	bne.n	8002a0e <osThreadNew+0xf6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d108      	bne.n	8002a0e <osThreadNew+0xf6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <osThreadNew+0xf6>
          mem = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a08:	e001      	b.n	8002a0e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d110      	bne.n	8002a36 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a1c:	9202      	str	r2, [sp, #8]
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fe02 	bl	8003634 <xTaskCreateStatic>
 8002a30:	4603      	mov	r3, r0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e013      	b.n	8002a5e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d110      	bne.n	8002a5e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fe49 	bl	80036e6 <xTaskCreate>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d001      	beq.n	8002a5e <osThreadNew+0x146>
          hTask = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a5e:	697b      	ldr	r3, [r7, #20]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3738      	adds	r7, #56	; 0x38
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200000ac 	.word	0x200000ac

08002a6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a74:	f3ef 8305 	mrs	r3, IPSR
 8002a78:	613b      	str	r3, [r7, #16]
  return(result);
 8002a7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a80:	f3ef 8310 	mrs	r3, PRIMASK
 8002a84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <osDelay+0x34>
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <osDelay+0x58>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d109      	bne.n	8002aa8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a94:	f3ef 8311 	mrs	r3, BASEPRI
 8002a98:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <osDelay+0x3c>
    stat = osErrorISR;
 8002aa0:	f06f 0305 	mvn.w	r3, #5
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e007      	b.n	8002ab8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 ff52 	bl	800395c <vTaskDelay>
    }
  }

  return (stat);
 8002ab8:	697b      	ldr	r3, [r7, #20]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200000ac 	.word	0x200000ac

08002ac8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <vApplicationGetIdleTaskMemory+0x28>)
 8002ad8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ade:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	601a      	str	r2, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	200000b0 	.word	0x200000b0
 8002af4:	2000010c 	.word	0x2000010c

08002af8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <vApplicationGetTimerTaskMemory+0x30>)
 8002b0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b16:	601a      	str	r2, [r3, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	2000030c 	.word	0x2000030c
 8002b28:	20000368 	.word	0x20000368

08002b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 0208 	add.w	r2, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f103 0208 	add.w	r2, r3, #8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f103 0208 	add.w	r2, r3, #8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	601a      	str	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bde:	d103      	bne.n	8002be8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e00c      	b.n	8002c02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3308      	adds	r3, #8
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e002      	b.n	8002bf6 <vListInsert+0x2e>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d2f6      	bcs.n	8002bf0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6892      	ldr	r2, [r2, #8]
 8002c4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6852      	ldr	r2, [r2, #4]
 8002c58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d103      	bne.n	8002c6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
	...

08002c8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	e7fe      	b.n	8002cb2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002cb4:	f001 ff98 	bl	8004be8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	441a      	add	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	441a      	add	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	22ff      	movs	r2, #255	; 0xff
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	22ff      	movs	r2, #255	; 0xff
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01a      	beq.n	8002d48 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3310      	adds	r3, #16
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f8d8 	bl	8003ecc <xTaskRemoveFromEventList>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d012      	beq.n	8002d48 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <xQueueGenericReset+0xcc>)
 8002d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	e009      	b.n	8002d48 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3310      	adds	r3, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fef7 	bl	8002b2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3324      	adds	r3, #36	; 0x24
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fef2 	bl	8002b2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d48:	f001 ff7c 	bl	8004c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08e      	sub	sp, #56	; 0x38
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <xQueueGenericCreateStatic+0x28>
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d82:	e7fe      	b.n	8002d82 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <xQueueGenericCreateStatic+0x42>
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	e7fe      	b.n	8002d9c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <xQueueGenericCreateStatic+0x4e>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <xQueueGenericCreateStatic+0x52>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericCreateStatic+0x54>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <xQueueGenericCreateStatic+0x6c>
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
 8002dc6:	e7fe      	b.n	8002dc6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <xQueueGenericCreateStatic+0x78>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <xQueueGenericCreateStatic+0x7c>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <xQueueGenericCreateStatic+0x7e>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <xQueueGenericCreateStatic+0x96>
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002df2:	2350      	movs	r3, #80	; 0x50
 8002df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b50      	cmp	r3, #80	; 0x50
 8002dfa:	d009      	beq.n	8002e10 <xQueueGenericCreateStatic+0xb4>
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	e7fe      	b.n	8002e0e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f805 	bl	8002e40 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3730      	adds	r7, #48	; 0x30
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e002      	b.n	8002e62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e6e:	2101      	movs	r1, #1
 8002e70:	69b8      	ldr	r0, [r7, #24]
 8002e72:	f7ff ff0b 	bl	8002c8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <xQueueGenericSend+0x30>
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSend+0x3e>
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <xQueueGenericSend+0x42>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericSend+0x44>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <xQueueGenericSend+0x5c>
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e7fe      	b.n	8002ee2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d103      	bne.n	8002ef2 <xQueueGenericSend+0x6a>
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <xQueueGenericSend+0x6e>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <xQueueGenericSend+0x70>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <xQueueGenericSend+0x88>
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	e7fe      	b.n	8002f0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f10:	f001 f996 	bl	8004240 <xTaskGetSchedulerState>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <xQueueGenericSend+0x98>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <xQueueGenericSend+0x9c>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <xQueueGenericSend+0x9e>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <xQueueGenericSend+0xb6>
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e7fe      	b.n	8002f3c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f3e:	f001 fe53 	bl	8004be8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <xQueueGenericSend+0xcc>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d129      	bne.n	8002fa8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f5a:	f000 f9ff 	bl	800335c <prvCopyDataToQueue>
 8002f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	3324      	adds	r3, #36	; 0x24
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 ffad 	bl	8003ecc <xTaskRemoveFromEventList>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f78:	4b3f      	ldr	r3, [pc, #252]	; (8003078 <xQueueGenericSend+0x1f0>)
 8002f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	e00a      	b.n	8002fa0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f90:	4b39      	ldr	r3, [pc, #228]	; (8003078 <xQueueGenericSend+0x1f0>)
 8002f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fa0:	f001 fe50 	bl	8004c44 <vPortExitCritical>
				return pdPASS;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e063      	b.n	8003070 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fae:	f001 fe49 	bl	8004c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e05c      	b.n	8003070 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 ffe5 	bl	8003f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fca:	f001 fe3b 	bl	8004c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fce:	f000 fd5d 	bl	8003a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fd2:	f001 fe09 	bl	8004be8 <vPortEnterCritical>
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe2:	d103      	bne.n	8002fec <xQueueGenericSend+0x164>
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff8:	d103      	bne.n	8003002 <xQueueGenericSend+0x17a>
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003002:	f001 fe1f 	bl	8004c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003006:	1d3a      	adds	r2, r7, #4
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 ffd4 	bl	8003fbc <xTaskCheckForTimeOut>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d124      	bne.n	8003064 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800301a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800301c:	f000 fa96 	bl	800354c <prvIsQueueFull>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d018      	beq.n	8003058 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	3310      	adds	r3, #16
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fefe 	bl	8003e30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003036:	f000 fa21 	bl	800347c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800303a:	f000 fd35 	bl	8003aa8 <xTaskResumeAll>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	f47f af7c 	bne.w	8002f3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <xQueueGenericSend+0x1f0>)
 8003048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	e772      	b.n	8002f3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305a:	f000 fa0f 	bl	800347c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800305e:	f000 fd23 	bl	8003aa8 <xTaskResumeAll>
 8003062:	e76c      	b.n	8002f3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003066:	f000 fa09 	bl	800347c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800306a:	f000 fd1d 	bl	8003aa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800306e:	2300      	movs	r3, #0
		}
	}
}
 8003070:	4618      	mov	r0, r3
 8003072:	3738      	adds	r7, #56	; 0x38
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	e000ed04 	.word	0xe000ed04

0800307c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	; 0x38
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <xQueueGenericSendFromISR+0x2c>
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
 80030a6:	e7fe      	b.n	80030a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <xQueueGenericSendFromISR+0x3a>
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <xQueueGenericSendFromISR+0x3e>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <xQueueGenericSendFromISR+0x40>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <xQueueGenericSendFromISR+0x58>
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	e7fe      	b.n	80030d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d103      	bne.n	80030e2 <xQueueGenericSendFromISR+0x66>
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <xQueueGenericSendFromISR+0x6a>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <xQueueGenericSendFromISR+0x6c>
 80030e6:	2300      	movs	r3, #0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <xQueueGenericSendFromISR+0x84>
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e7fe      	b.n	80030fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003100:	f001 fe2c 	bl	8004d5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003104:	f3ef 8211 	mrs	r2, BASEPRI
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61ba      	str	r2, [r7, #24]
 800311a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800311c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	429a      	cmp	r2, r3
 800312a:	d302      	bcc.n	8003132 <xQueueGenericSendFromISR+0xb6>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d12c      	bne.n	800318c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003142:	f000 f90b 	bl	800335c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003146:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800314e:	d112      	bne.n	8003176 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d016      	beq.n	8003186 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	3324      	adds	r3, #36	; 0x24
 800315c:	4618      	mov	r0, r3
 800315e:	f000 feb5 	bl	8003ecc <xTaskRemoveFromEventList>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e007      	b.n	8003186 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800317a:	3301      	adds	r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	b25a      	sxtb	r2, r3
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003186:	2301      	movs	r3, #1
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800318a:	e001      	b.n	8003190 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800318c:	2300      	movs	r3, #0
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800319c:	4618      	mov	r0, r3
 800319e:	3738      	adds	r7, #56	; 0x38
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <xQueueReceive+0x2e>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	623b      	str	r3, [r7, #32]
 80031d0:	e7fe      	b.n	80031d0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <xQueueReceive+0x3c>
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <xQueueReceive+0x40>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <xQueueReceive+0x42>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <xQueueReceive+0x5a>
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	e7fe      	b.n	80031fc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031fe:	f001 f81f 	bl	8004240 <xTaskGetSchedulerState>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <xQueueReceive+0x6a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <xQueueReceive+0x6e>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueReceive+0x70>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <xQueueReceive+0x88>
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	e7fe      	b.n	800322a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800322c:	f001 fcdc 	bl	8004be8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01f      	beq.n	800327c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003240:	f000 f8f6 	bl	8003430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	1e5a      	subs	r2, r3, #1
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00f      	beq.n	8003274 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	3310      	adds	r3, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fe37 	bl	8003ecc <xTaskRemoveFromEventList>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003264:	4b3c      	ldr	r3, [pc, #240]	; (8003358 <xQueueReceive+0x1b4>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003274:	f001 fce6 	bl	8004c44 <vPortExitCritical>
				return pdPASS;
 8003278:	2301      	movs	r3, #1
 800327a:	e069      	b.n	8003350 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003282:	f001 fcdf 	bl	8004c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003286:	2300      	movs	r3, #0
 8003288:	e062      	b.n	8003350 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fe7b 	bl	8003f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800329a:	2301      	movs	r3, #1
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800329e:	f001 fcd1 	bl	8004c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032a2:	f000 fbf3 	bl	8003a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032a6:	f001 fc9f 	bl	8004be8 <vPortEnterCritical>
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b6:	d103      	bne.n	80032c0 <xQueueReceive+0x11c>
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c6:	b25b      	sxtb	r3, r3
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032cc:	d103      	bne.n	80032d6 <xQueueReceive+0x132>
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d6:	f001 fcb5 	bl	8004c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032da:	1d3a      	adds	r2, r7, #4
 80032dc:	f107 0310 	add.w	r3, r7, #16
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fe6a 	bl	8003fbc <xTaskCheckForTimeOut>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d123      	bne.n	8003336 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f0:	f000 f916 	bl	8003520 <prvIsQueueEmpty>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d017      	beq.n	800332a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	3324      	adds	r3, #36	; 0x24
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fd94 	bl	8003e30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330a:	f000 f8b7 	bl	800347c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800330e:	f000 fbcb 	bl	8003aa8 <xTaskResumeAll>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d189      	bne.n	800322c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <xQueueReceive+0x1b4>)
 800331a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	e780      	b.n	800322c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800332a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332c:	f000 f8a6 	bl	800347c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003330:	f000 fbba 	bl	8003aa8 <xTaskResumeAll>
 8003334:	e77a      	b.n	800322c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003338:	f000 f8a0 	bl	800347c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800333c:	f000 fbb4 	bl	8003aa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003342:	f000 f8ed 	bl	8003520 <prvIsQueueEmpty>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f43f af6f 	beq.w	800322c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800334e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003350:	4618      	mov	r0, r3
 8003352:	3730      	adds	r7, #48	; 0x30
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d14d      	bne.n	800341e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff78 	bl	800427c <xTaskPriorityDisinherit>
 800338c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	e043      	b.n	800341e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d119      	bne.n	80033d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6898      	ldr	r0, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	461a      	mov	r2, r3
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	f001 ff0c 	bl	80051c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	441a      	add	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d32b      	bcc.n	800341e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	e026      	b.n	800341e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68d8      	ldr	r0, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	461a      	mov	r2, r3
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	f001 fef2 	bl	80051c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	425b      	negs	r3, r3
 80033ea:	441a      	add	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d207      	bcs.n	800340c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	425b      	negs	r3, r3
 8003406:	441a      	add	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d105      	bne.n	800341e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3b01      	subs	r3, #1
 800341c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003426:	697b      	ldr	r3, [r7, #20]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d303      	bcc.n	8003464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68d9      	ldr	r1, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	461a      	mov	r2, r3
 800346e:	6838      	ldr	r0, [r7, #0]
 8003470:	f001 fea8 	bl	80051c4 <memcpy>
	}
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003484:	f001 fbb0 	bl	8004be8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003490:	e011      	b.n	80034b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3324      	adds	r3, #36	; 0x24
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fd14 	bl	8003ecc <xTaskRemoveFromEventList>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034aa:	f000 fde7 	bl	800407c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dce9      	bgt.n	8003492 <prvUnlockQueue+0x16>
 80034be:	e000      	b.n	80034c2 <prvUnlockQueue+0x46>
					break;
 80034c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	22ff      	movs	r2, #255	; 0xff
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034ca:	f001 fbbb 	bl	8004c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ce:	f001 fb8b 	bl	8004be8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034da:	e011      	b.n	8003500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3310      	adds	r3, #16
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fcef 	bl	8003ecc <xTaskRemoveFromEventList>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034f4:	f000 fdc2 	bl	800407c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003504:	2b00      	cmp	r3, #0
 8003506:	dce9      	bgt.n	80034dc <prvUnlockQueue+0x60>
 8003508:	e000      	b.n	800350c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800350a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	22ff      	movs	r2, #255	; 0xff
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003514:	f001 fb96 	bl	8004c44 <vPortExitCritical>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003528:	f001 fb5e 	bl	8004be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e001      	b.n	800353e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800353e:	f001 fb81 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 8003542:	68fb      	ldr	r3, [r7, #12]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003554:	f001 fb48 	bl	8004be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	429a      	cmp	r2, r3
 8003562:	d102      	bne.n	800356a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e001      	b.n	800356e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800356e:	f001 fb69 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	e014      	b.n	80035b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800358c:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003598:	490b      	ldr	r1, [pc, #44]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035ae:	e005      	b.n	80035bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b07      	cmp	r3, #7
 80035ba:	d9e7      	bls.n	800358c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20001ac8 	.word	0x20001ac8

080035cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035dc:	f001 fb04 	bl	8004be8 <vPortEnterCritical>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ec:	d103      	bne.n	80035f6 <vQueueWaitForMessageRestricted+0x2a>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003602:	d103      	bne.n	800360c <vQueueWaitForMessageRestricted+0x40>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800360c:	f001 fb1a 	bl	8004c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3324      	adds	r3, #36	; 0x24
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fc29 	bl	8003e78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff ff28 	bl	800347c <prvUnlockQueue>
	}
 800362c:	bf00      	nop
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08e      	sub	sp, #56	; 0x38
 8003638:	af04      	add	r7, sp, #16
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <xTaskCreateStatic+0x28>
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	e7fe      	b.n	800365a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <xTaskCreateStatic+0x42>
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e7fe      	b.n	8003674 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003676:	235c      	movs	r3, #92	; 0x5c
 8003678:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b5c      	cmp	r3, #92	; 0x5c
 800367e:	d009      	beq.n	8003694 <xTaskCreateStatic+0x60>
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e7fe      	b.n	8003692 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01e      	beq.n	80036d8 <xTaskCreateStatic+0xa4>
 800369a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036b2:	2300      	movs	r3, #0
 80036b4:	9303      	str	r3, [sp, #12]
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	9302      	str	r3, [sp, #8]
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f850 	bl	8003770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d2:	f000 f8d3 	bl	800387c <prvAddNewTaskToReadyList>
 80036d6:	e001      	b.n	80036dc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036dc:	697b      	ldr	r3, [r7, #20]
	}
 80036de:	4618      	mov	r0, r3
 80036e0:	3728      	adds	r7, #40	; 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b08c      	sub	sp, #48	; 0x30
 80036ea:	af04      	add	r7, sp, #16
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fb6a 	bl	8004dd4 <pvPortMalloc>
 8003700:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003708:	205c      	movs	r0, #92	; 0x5c
 800370a:	f001 fb63 	bl	8004dd4 <pvPortMalloc>
 800370e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
 800371c:	e005      	b.n	800372a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f001 fc1a 	bl	8004f58 <vPortFree>
 8003724:	e001      	b.n	800372a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d017      	beq.n	8003760 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	2300      	movs	r3, #0
 800373c:	9303      	str	r3, [sp, #12]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f80e 	bl	8003770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003754:	69f8      	ldr	r0, [r7, #28]
 8003756:	f000 f891 	bl	800387c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800375a:	2301      	movs	r3, #1
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	e002      	b.n	8003766 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003764:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003766:	69bb      	ldr	r3, [r7, #24]
	}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	461a      	mov	r2, r3
 8003788:	21a5      	movs	r1, #165	; 0xa5
 800378a:	f001 fd29 	bl	80051e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003798:	3b01      	subs	r3, #1
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f023 0307 	bic.w	r3, r3, #7
 80037a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <prvInitialiseNewTask+0x56>
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e7fe      	b.n	80037c4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e012      	b.n	80037f2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	7819      	ldrb	r1, [r3, #0]
 80037d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	3334      	adds	r3, #52	; 0x34
 80037dc:	460a      	mov	r2, r1
 80037de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b0f      	cmp	r3, #15
 80037f6:	d9e9      	bls.n	80037cc <prvInitialiseNewTask+0x5c>
 80037f8:	e000      	b.n	80037fc <prvInitialiseNewTask+0x8c>
		{
			break;
 80037fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	2b37      	cmp	r3, #55	; 0x37
 8003808:	d901      	bls.n	800380e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800380a:	2337      	movs	r3, #55	; 0x37
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003818:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2200      	movs	r2, #0
 800381e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	3304      	adds	r3, #4
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f9a0 	bl	8002b6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	3318      	adds	r3, #24
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff f99b 	bl	8002b6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003838:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003848:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	2200      	movs	r2, #0
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	69b8      	ldr	r0, [r7, #24]
 800385e:	f001 f8d7 	bl	8004a10 <pxPortInitialiseStack>
 8003862:	4602      	mov	r2, r0
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003872:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003874:	bf00      	nop
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003884:	f001 f9b0 	bl	8004be8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003888:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <prvAddNewTaskToReadyList+0xc4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <prvAddNewTaskToReadyList+0xc4>)
 8003890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800389a:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <prvAddNewTaskToReadyList+0xc4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038a8:	f000 fc0c 	bl	80040c4 <prvInitialiseTaskLists>
 80038ac:	e00d      	b.n	80038ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ae:	4b26      	ldr	r3, [pc, #152]	; (8003948 <prvAddNewTaskToReadyList+0xcc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d802      	bhi.n	80038ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038c4:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <prvAddNewTaskToReadyList+0xd4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d903      	bls.n	80038f0 <prvAddNewTaskToReadyList+0x74>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <prvAddNewTaskToReadyList+0xd4>)
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <prvAddNewTaskToReadyList+0xd8>)
 80038fe:	441a      	add	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7ff f93b 	bl	8002b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800390c:	f001 f99a 	bl	8004c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <prvAddNewTaskToReadyList+0xcc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	429a      	cmp	r2, r3
 8003924:	d207      	bcs.n	8003936 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <prvAddNewTaskToReadyList+0xdc>)
 8003928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000c3c 	.word	0x20000c3c
 8003944:	20000768 	.word	0x20000768
 8003948:	20000c48 	.word	0x20000c48
 800394c:	20000c58 	.word	0x20000c58
 8003950:	20000c44 	.word	0x20000c44
 8003954:	2000076c 	.word	0x2000076c
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d016      	beq.n	800399c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <vTaskDelay+0x60>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <vTaskDelay+0x2e>
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	e7fe      	b.n	8003988 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800398a:	f000 f87f 	bl	8003a8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800398e:	2100      	movs	r1, #0
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fcdf 	bl	8004354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003996:	f000 f887 	bl	8003aa8 <xTaskResumeAll>
 800399a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d107      	bne.n	80039b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <vTaskDelay+0x64>)
 80039a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000c64 	.word	0x20000c64
 80039c0:	e000ed04 	.word	0xe000ed04

080039c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	; 0x28
 80039c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039d2:	463a      	mov	r2, r7
 80039d4:	1d39      	adds	r1, r7, #4
 80039d6:	f107 0308 	add.w	r3, r7, #8
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff f874 	bl	8002ac8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	9202      	str	r2, [sp, #8]
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	2300      	movs	r3, #0
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	460a      	mov	r2, r1
 80039f2:	4920      	ldr	r1, [pc, #128]	; (8003a74 <vTaskStartScheduler+0xb0>)
 80039f4:	4820      	ldr	r0, [pc, #128]	; (8003a78 <vTaskStartScheduler+0xb4>)
 80039f6:	f7ff fe1d 	bl	8003634 <xTaskCreateStatic>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <vTaskStartScheduler+0xb8>)
 80039fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a00:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <vTaskStartScheduler+0xb8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e001      	b.n	8003a12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a18:	f000 fcf0 	bl	80043fc <xTimerCreateTimerTask>
 8003a1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d115      	bne.n	8003a50 <vTaskStartScheduler+0x8c>
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <vTaskStartScheduler+0xbc>)
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <vTaskStartScheduler+0xc0>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <vTaskStartScheduler+0xc4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a4a:	f001 f85d 	bl	8004b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a4e:	e00d      	b.n	8003a6c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a56:	d109      	bne.n	8003a6c <vTaskStartScheduler+0xa8>
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e7fe      	b.n	8003a6a <vTaskStartScheduler+0xa6>
}
 8003a6c:	bf00      	nop
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	08005250 	.word	0x08005250
 8003a78:	08004095 	.word	0x08004095
 8003a7c:	20000c60 	.word	0x20000c60
 8003a80:	20000c5c 	.word	0x20000c5c
 8003a84:	20000c48 	.word	0x20000c48
 8003a88:	20000c40 	.word	0x20000c40

08003a8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <vTaskSuspendAll+0x18>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <vTaskSuspendAll+0x18>)
 8003a98:	6013      	str	r3, [r2, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000c64 	.word	0x20000c64

08003aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ab6:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <xTaskResumeAll+0x114>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <xTaskResumeAll+0x2a>
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	e7fe      	b.n	8003ad0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ad2:	f001 f889 	bl	8004be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ad6:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <xTaskResumeAll+0x114>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	4a37      	ldr	r2, [pc, #220]	; (8003bbc <xTaskResumeAll+0x114>)
 8003ade:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ae0:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <xTaskResumeAll+0x114>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d162      	bne.n	8003bae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ae8:	4b35      	ldr	r3, [pc, #212]	; (8003bc0 <xTaskResumeAll+0x118>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d05e      	beq.n	8003bae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003af0:	e02f      	b.n	8003b52 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003af2:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <xTaskResumeAll+0x11c>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3318      	adds	r3, #24
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff f89a 	bl	8002c38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff f895 	bl	8002c38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <xTaskResumeAll+0x120>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d903      	bls.n	8003b22 <xTaskResumeAll+0x7a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <xTaskResumeAll+0x120>)
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <xTaskResumeAll+0x124>)
 8003b30:	441a      	add	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f7ff f822 	bl	8002b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <xTaskResumeAll+0x128>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <xTaskResumeAll+0x12c>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b52:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <xTaskResumeAll+0x11c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1cb      	bne.n	8003af2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b60:	f000 fb4a 	bl	80041f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <xTaskResumeAll+0x130>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d010      	beq.n	8003b92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b70:	f000 f844 	bl	8003bfc <xTaskIncrementTick>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <xTaskResumeAll+0x12c>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f1      	bne.n	8003b70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <xTaskResumeAll+0x130>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <xTaskResumeAll+0x12c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <xTaskResumeAll+0x134>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bae:	f001 f849 	bl	8004c44 <vPortExitCritical>

	return xAlreadyYielded;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000c64 	.word	0x20000c64
 8003bc0:	20000c3c 	.word	0x20000c3c
 8003bc4:	20000bfc 	.word	0x20000bfc
 8003bc8:	20000c44 	.word	0x20000c44
 8003bcc:	2000076c 	.word	0x2000076c
 8003bd0:	20000768 	.word	0x20000768
 8003bd4:	20000c50 	.word	0x20000c50
 8003bd8:	20000c4c 	.word	0x20000c4c
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <xTaskGetTickCount+0x18>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	20000c40 	.word	0x20000c40

08003bfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c06:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <xTaskIncrementTick+0x150>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 808d 	bne.w	8003d2a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c10:	4b4f      	ldr	r3, [pc, #316]	; (8003d50 <xTaskIncrementTick+0x154>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c18:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <xTaskIncrementTick+0x154>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d11f      	bne.n	8003c64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c24:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <xTaskIncrementTick+0x158>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <xTaskIncrementTick+0x46>
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	e7fe      	b.n	8003c40 <xTaskIncrementTick+0x44>
 8003c42:	4b44      	ldr	r3, [pc, #272]	; (8003d54 <xTaskIncrementTick+0x158>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <xTaskIncrementTick+0x15c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a41      	ldr	r2, [pc, #260]	; (8003d54 <xTaskIncrementTick+0x158>)
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <xTaskIncrementTick+0x15c>)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <xTaskIncrementTick+0x160>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	4a3f      	ldr	r2, [pc, #252]	; (8003d5c <xTaskIncrementTick+0x160>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	f000 faca 	bl	80041f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c64:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <xTaskIncrementTick+0x164>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d34e      	bcc.n	8003d0c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c6e:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <xTaskIncrementTick+0x158>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <xTaskIncrementTick+0x80>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <xTaskIncrementTick+0x82>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c82:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <xTaskIncrementTick+0x164>)
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c88:	601a      	str	r2, [r3, #0]
					break;
 8003c8a:	e03f      	b.n	8003d0c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c8c:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <xTaskIncrementTick+0x158>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d203      	bcs.n	8003cac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ca4:	4a2e      	ldr	r2, [pc, #184]	; (8003d60 <xTaskIncrementTick+0x164>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6013      	str	r3, [r2, #0]
						break;
 8003caa:	e02f      	b.n	8003d0c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe ffc1 	bl	8002c38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3318      	adds	r3, #24
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe ffb8 	bl	8002c38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <xTaskIncrementTick+0x168>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d903      	bls.n	8003cdc <xTaskIncrementTick+0xe0>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <xTaskIncrementTick+0x168>)
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <xTaskIncrementTick+0x16c>)
 8003cea:	441a      	add	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f7fe ff45 	bl	8002b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <xTaskIncrementTick+0x170>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3b3      	bcc.n	8003c6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003d06:	2301      	movs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d0a:	e7b0      	b.n	8003c6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <xTaskIncrementTick+0x170>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d12:	4915      	ldr	r1, [pc, #84]	; (8003d68 <xTaskIncrementTick+0x16c>)
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d907      	bls.n	8003d34 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e004      	b.n	8003d34 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <xTaskIncrementTick+0x174>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <xTaskIncrementTick+0x174>)
 8003d32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <xTaskIncrementTick+0x178>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d40:	697b      	ldr	r3, [r7, #20]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000c64 	.word	0x20000c64
 8003d50:	20000c40 	.word	0x20000c40
 8003d54:	20000bf4 	.word	0x20000bf4
 8003d58:	20000bf8 	.word	0x20000bf8
 8003d5c:	20000c54 	.word	0x20000c54
 8003d60:	20000c5c 	.word	0x20000c5c
 8003d64:	20000c44 	.word	0x20000c44
 8003d68:	2000076c 	.word	0x2000076c
 8003d6c:	20000768 	.word	0x20000768
 8003d70:	20000c4c 	.word	0x20000c4c
 8003d74:	20000c50 	.word	0x20000c50

08003d78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d7e:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <vTaskSwitchContext+0xa4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <vTaskSwitchContext+0xa8>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d8c:	e040      	b.n	8003e10 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <vTaskSwitchContext+0xa8>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <vTaskSwitchContext+0xac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e00f      	b.n	8003dbc <vTaskSwitchContext+0x44>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <vTaskSwitchContext+0x3e>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	e7fe      	b.n	8003db4 <vTaskSwitchContext+0x3c>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	491a      	ldr	r1, [pc, #104]	; (8003e28 <vTaskSwitchContext+0xb0>)
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0e5      	beq.n	8003d9c <vTaskSwitchContext+0x24>
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <vTaskSwitchContext+0xb0>)
 8003ddc:	4413      	add	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3308      	adds	r3, #8
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d104      	bne.n	8003e00 <vTaskSwitchContext+0x88>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <vTaskSwitchContext+0xb4>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <vTaskSwitchContext+0xac>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000c64 	.word	0x20000c64
 8003e20:	20000c50 	.word	0x20000c50
 8003e24:	20000c44 	.word	0x20000c44
 8003e28:	2000076c 	.word	0x2000076c
 8003e2c:	20000768 	.word	0x20000768

08003e30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <vTaskPlaceOnEventList+0x24>
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e7fe      	b.n	8003e52 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <vTaskPlaceOnEventList+0x44>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3318      	adds	r3, #24
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fe feb3 	bl	8002bc8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e62:	2101      	movs	r1, #1
 8003e64:	6838      	ldr	r0, [r7, #0]
 8003e66:	f000 fa75 	bl	8004354 <prvAddCurrentTaskToDelayedList>
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000768 	.word	0x20000768

08003e78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <vTaskPlaceOnEventListRestricted+0x26>
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e7fe      	b.n	8003e9c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <vTaskPlaceOnEventListRestricted+0x50>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3318      	adds	r3, #24
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7fe fe6b 	bl	8002b82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	68b8      	ldr	r0, [r7, #8]
 8003ebc:	f000 fa4a 	bl	8004354 <prvAddCurrentTaskToDelayedList>
	}
 8003ec0:	bf00      	nop
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000768 	.word	0x20000768

08003ecc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <xTaskRemoveFromEventList+0x2a>
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e7fe      	b.n	8003ef4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3318      	adds	r3, #24
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fe9c 	bl	8002c38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f00:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <xTaskRemoveFromEventList+0xac>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11d      	bne.n	8003f44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fe93 	bl	8002c38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f16:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <xTaskRemoveFromEventList+0xb0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d903      	bls.n	8003f26 <xTaskRemoveFromEventList+0x5a>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <xTaskRemoveFromEventList+0xb0>)
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <xTaskRemoveFromEventList+0xb4>)
 8003f34:	441a      	add	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7fe fe20 	bl	8002b82 <vListInsertEnd>
 8003f42:	e005      	b.n	8003f50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	3318      	adds	r3, #24
 8003f48:	4619      	mov	r1, r3
 8003f4a:	480e      	ldr	r0, [pc, #56]	; (8003f84 <xTaskRemoveFromEventList+0xb8>)
 8003f4c:	f7fe fe19 	bl	8002b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <xTaskRemoveFromEventList+0xbc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d905      	bls.n	8003f6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <xTaskRemoveFromEventList+0xc0>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e001      	b.n	8003f6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003f6e:	697b      	ldr	r3, [r7, #20]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000c64 	.word	0x20000c64
 8003f7c:	20000c44 	.word	0x20000c44
 8003f80:	2000076c 	.word	0x2000076c
 8003f84:	20000bfc 	.word	0x20000bfc
 8003f88:	20000768 	.word	0x20000768
 8003f8c:	20000c50 	.word	0x20000c50

08003f90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <vTaskInternalSetTimeOutState+0x24>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <vTaskInternalSetTimeOutState+0x28>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000c54 	.word	0x20000c54
 8003fb8:	20000c40 	.word	0x20000c40

08003fbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <xTaskCheckForTimeOut+0x24>
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	e7fe      	b.n	8003fde <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <xTaskCheckForTimeOut+0x3e>
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	e7fe      	b.n	8003ff8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003ffa:	f000 fdf5 	bl	8004be8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <xTaskCheckForTimeOut+0xb8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004016:	d102      	bne.n	800401e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	e023      	b.n	8004066 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <xTaskCheckForTimeOut+0xbc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d007      	beq.n	800403a <xTaskCheckForTimeOut+0x7e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	e015      	b.n	8004066 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	429a      	cmp	r2, r3
 8004042:	d20b      	bcs.n	800405c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	1ad2      	subs	r2, r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff9d 	bl	8003f90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e004      	b.n	8004066 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004062:	2301      	movs	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004066:	f000 fded 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 800406a:	69fb      	ldr	r3, [r7, #28]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000c40 	.word	0x20000c40
 8004078:	20000c54 	.word	0x20000c54

0800407c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <vTaskMissedYield+0x14>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000c50 	.word	0x20000c50

08004094 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800409c:	f000 f852 	bl	8004144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <prvIdleTask+0x28>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d9f9      	bls.n	800409c <prvIdleTask+0x8>
			{
				taskYIELD();
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <prvIdleTask+0x2c>)
 80040aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040b8:	e7f0      	b.n	800409c <prvIdleTask+0x8>
 80040ba:	bf00      	nop
 80040bc:	2000076c 	.word	0x2000076c
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	e00c      	b.n	80040ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4a12      	ldr	r2, [pc, #72]	; (8004124 <prvInitialiseTaskLists+0x60>)
 80040dc:	4413      	add	r3, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fd24 	bl	8002b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3301      	adds	r3, #1
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b37      	cmp	r3, #55	; 0x37
 80040ee:	d9ef      	bls.n	80040d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040f0:	480d      	ldr	r0, [pc, #52]	; (8004128 <prvInitialiseTaskLists+0x64>)
 80040f2:	f7fe fd1b 	bl	8002b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040f6:	480d      	ldr	r0, [pc, #52]	; (800412c <prvInitialiseTaskLists+0x68>)
 80040f8:	f7fe fd18 	bl	8002b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040fc:	480c      	ldr	r0, [pc, #48]	; (8004130 <prvInitialiseTaskLists+0x6c>)
 80040fe:	f7fe fd15 	bl	8002b2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004102:	480c      	ldr	r0, [pc, #48]	; (8004134 <prvInitialiseTaskLists+0x70>)
 8004104:	f7fe fd12 	bl	8002b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004108:	480b      	ldr	r0, [pc, #44]	; (8004138 <prvInitialiseTaskLists+0x74>)
 800410a:	f7fe fd0f 	bl	8002b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <prvInitialiseTaskLists+0x78>)
 8004110:	4a05      	ldr	r2, [pc, #20]	; (8004128 <prvInitialiseTaskLists+0x64>)
 8004112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <prvInitialiseTaskLists+0x7c>)
 8004116:	4a05      	ldr	r2, [pc, #20]	; (800412c <prvInitialiseTaskLists+0x68>)
 8004118:	601a      	str	r2, [r3, #0]
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	2000076c 	.word	0x2000076c
 8004128:	20000bcc 	.word	0x20000bcc
 800412c:	20000be0 	.word	0x20000be0
 8004130:	20000bfc 	.word	0x20000bfc
 8004134:	20000c10 	.word	0x20000c10
 8004138:	20000c28 	.word	0x20000c28
 800413c:	20000bf4 	.word	0x20000bf4
 8004140:	20000bf8 	.word	0x20000bf8

08004144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800414a:	e019      	b.n	8004180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800414c:	f000 fd4c 	bl	8004be8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <prvCheckTasksWaitingTermination+0x4c>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fd6b 	bl	8002c38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <prvCheckTasksWaitingTermination+0x50>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3b01      	subs	r3, #1
 8004168:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <prvCheckTasksWaitingTermination+0x50>)
 800416a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <prvCheckTasksWaitingTermination+0x54>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <prvCheckTasksWaitingTermination+0x54>)
 8004174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004176:	f000 fd65 	bl	8004c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f80e 	bl	800419c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <prvCheckTasksWaitingTermination+0x54>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e1      	bne.n	800414c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000c10 	.word	0x20000c10
 8004194:	20000c3c 	.word	0x20000c3c
 8004198:	20000c24 	.word	0x20000c24

0800419c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fed0 	bl	8004f58 <vPortFree>
				vPortFree( pxTCB );
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fecd 	bl	8004f58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041be:	e017      	b.n	80041f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d103      	bne.n	80041d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fec4 	bl	8004f58 <vPortFree>
	}
 80041d0:	e00e      	b.n	80041f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d009      	beq.n	80041f0 <prvDeleteTCB+0x54>
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e7fe      	b.n	80041ee <prvDeleteTCB+0x52>
	}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041fe:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <prvResetNextTaskUnblockTime+0x40>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <prvResetNextTaskUnblockTime+0x14>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <prvResetNextTaskUnblockTime+0x16>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <prvResetNextTaskUnblockTime+0x44>)
 8004214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004218:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800421a:	e008      	b.n	800422e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <prvResetNextTaskUnblockTime+0x40>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4a04      	ldr	r2, [pc, #16]	; (800423c <prvResetNextTaskUnblockTime+0x44>)
 800422c:	6013      	str	r3, [r2, #0]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	20000bf4 	.word	0x20000bf4
 800423c:	20000c5c 	.word	0x20000c5c

08004240 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <xTaskGetSchedulerState+0x34>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800424e:	2301      	movs	r3, #1
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	e008      	b.n	8004266 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004254:	4b08      	ldr	r3, [pc, #32]	; (8004278 <xTaskGetSchedulerState+0x38>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d102      	bne.n	8004262 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800425c:	2302      	movs	r3, #2
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	e001      	b.n	8004266 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004266:	687b      	ldr	r3, [r7, #4]
	}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000c48 	.word	0x20000c48
 8004278:	20000c64 	.word	0x20000c64

0800427c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d054      	beq.n	800433c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004292:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <xTaskPriorityDisinherit+0xcc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d009      	beq.n	80042b0 <xTaskPriorityDisinherit+0x34>
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e7fe      	b.n	80042ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <xTaskPriorityDisinherit+0x50>
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	e7fe      	b.n	80042ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	1e5a      	subs	r2, r3, #1
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	429a      	cmp	r2, r3
 80042e0:	d02c      	beq.n	800433c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d128      	bne.n	800433c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fca2 	bl	8002c38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <xTaskPriorityDisinherit+0xd0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d903      	bls.n	800431c <xTaskPriorityDisinherit+0xa0>
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4a0c      	ldr	r2, [pc, #48]	; (800434c <xTaskPriorityDisinherit+0xd0>)
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4a09      	ldr	r2, [pc, #36]	; (8004350 <xTaskPriorityDisinherit+0xd4>)
 800432a:	441a      	add	r2, r3
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f7fe fc25 	bl	8002b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004338:	2301      	movs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800433c:	697b      	ldr	r3, [r7, #20]
	}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000768 	.word	0x20000768
 800434c:	20000c44 	.word	0x20000c44
 8004350:	2000076c 	.word	0x2000076c

08004354 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800435e:	4b21      	ldr	r3, [pc, #132]	; (80043e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004364:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3304      	adds	r3, #4
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fc64 	bl	8002c38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004376:	d10a      	bne.n	800438e <prvAddCurrentTaskToDelayedList+0x3a>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4819      	ldr	r0, [pc, #100]	; (80043ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004388:	f7fe fbfb 	bl	8002b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800438c:	e026      	b.n	80043dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d209      	bcs.n	80043ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7fe fc08 	bl	8002bc8 <vListInsert>
}
 80043b8:	e010      	b.n	80043dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f7fe fbfe 	bl	8002bc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d202      	bcs.n	80043dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000c40 	.word	0x20000c40
 80043e8:	20000768 	.word	0x20000768
 80043ec:	20000c28 	.word	0x20000c28
 80043f0:	20000bf8 	.word	0x20000bf8
 80043f4:	20000bf4 	.word	0x20000bf4
 80043f8:	20000c5c 	.word	0x20000c5c

080043fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004406:	f000 fac3 	bl	8004990 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800440a:	4b1c      	ldr	r3, [pc, #112]	; (800447c <xTimerCreateTimerTask+0x80>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800441a:	1d3a      	adds	r2, r7, #4
 800441c:	f107 0108 	add.w	r1, r7, #8
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe fb67 	bl	8002af8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	9202      	str	r2, [sp, #8]
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	2302      	movs	r3, #2
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	460a      	mov	r2, r1
 800443c:	4910      	ldr	r1, [pc, #64]	; (8004480 <xTimerCreateTimerTask+0x84>)
 800443e:	4811      	ldr	r0, [pc, #68]	; (8004484 <xTimerCreateTimerTask+0x88>)
 8004440:	f7ff f8f8 	bl	8003634 <xTaskCreateStatic>
 8004444:	4602      	mov	r2, r0
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <xTimerCreateTimerTask+0x8c>)
 8004448:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <xTimerCreateTimerTask+0x8c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004452:	2301      	movs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <xTimerCreateTimerTask+0x74>
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	e7fe      	b.n	800446e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004470:	697b      	ldr	r3, [r7, #20]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000c98 	.word	0x20000c98
 8004480:	08005258 	.word	0x08005258
 8004484:	080045a5 	.word	0x080045a5
 8004488:	20000c9c 	.word	0x20000c9c

0800448c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <xTimerGenericCommand+0x2c>
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	e7fe      	b.n	80044b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044b8:	4b19      	ldr	r3, [pc, #100]	; (8004520 <xTimerGenericCommand+0x94>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02a      	beq.n	8004516 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	dc18      	bgt.n	8004504 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044d2:	f7ff feb5 	bl	8004240 <xTaskGetSchedulerState>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d109      	bne.n	80044f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044dc:	4b10      	ldr	r3, [pc, #64]	; (8004520 <xTimerGenericCommand+0x94>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	f107 0110 	add.w	r1, r7, #16
 80044e4:	2300      	movs	r3, #0
 80044e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e8:	f7fe fcce 	bl	8002e88 <xQueueGenericSend>
 80044ec:	6278      	str	r0, [r7, #36]	; 0x24
 80044ee:	e012      	b.n	8004516 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <xTimerGenericCommand+0x94>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	f107 0110 	add.w	r1, r7, #16
 80044f8:	2300      	movs	r3, #0
 80044fa:	2200      	movs	r2, #0
 80044fc:	f7fe fcc4 	bl	8002e88 <xQueueGenericSend>
 8004500:	6278      	str	r0, [r7, #36]	; 0x24
 8004502:	e008      	b.n	8004516 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <xTimerGenericCommand+0x94>)
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	f107 0110 	add.w	r1, r7, #16
 800450c:	2300      	movs	r3, #0
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	f7fe fdb4 	bl	800307c <xQueueGenericSendFromISR>
 8004514:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004518:	4618      	mov	r0, r3
 800451a:	3728      	adds	r7, #40	; 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000c98 	.word	0x20000c98

08004524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <prvProcessExpiredTimer+0x7c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3304      	adds	r3, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f7fe fb7b 	bl	8002c38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d121      	bne.n	800458e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	18d1      	adds	r1, r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	f000 f8c8 	bl	80046ec <prvInsertTimerInActiveList>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2300      	movs	r3, #0
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	2100      	movs	r1, #0
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	f7ff ff8d 	bl	800448c <xTimerGenericCommand>
 8004572:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <prvProcessExpiredTimer+0x6a>
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e7fe      	b.n	800458c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	6978      	ldr	r0, [r7, #20]
 8004594:	4798      	blx	r3
}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000c90 	.word	0x20000c90

080045a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f857 	bl	8004664 <prvGetNextExpireTime>
 80045b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4619      	mov	r1, r3
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f803 	bl	80045c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045c2:	f000 f8d5 	bl	8004770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045c6:	e7f1      	b.n	80045ac <prvTimerTask+0x8>

080045c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045d2:	f7ff fa5b 	bl	8003a8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f866 	bl	80046ac <prvSampleTimeNow>
 80045e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d130      	bne.n	800464a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <prvProcessTimerOrBlockTask+0x3c>
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d806      	bhi.n	8004604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045f6:	f7ff fa57 	bl	8003aa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff91 	bl	8004524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004602:	e024      	b.n	800464e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800460a:	4b13      	ldr	r3, [pc, #76]	; (8004658 <prvProcessTimerOrBlockTask+0x90>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <prvProcessTimerOrBlockTask+0x94>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	f7fe ffcf 	bl	80035cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800462e:	f7ff fa3b 	bl	8003aa8 <xTaskResumeAll>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <prvProcessTimerOrBlockTask+0x98>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
}
 8004648:	e001      	b.n	800464e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800464a:	f7ff fa2d 	bl	8003aa8 <xTaskResumeAll>
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000c94 	.word	0x20000c94
 800465c:	20000c98 	.word	0x20000c98
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800466c:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <prvGetNextExpireTime+0x44>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <prvGetNextExpireTime+0x44>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e001      	b.n	800469a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000c90 	.word	0x20000c90

080046ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046b4:	f7ff fa94 	bl	8003be0 <xTaskGetTickCount>
 80046b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <prvSampleTimeNow+0x3c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d205      	bcs.n	80046d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046c4:	f000 f904 	bl	80048d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e002      	b.n	80046d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <prvSampleTimeNow+0x3c>)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046dc:	68fb      	ldr	r3, [r7, #12]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000ca0 	.word	0x20000ca0

080046ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	429a      	cmp	r2, r3
 8004710:	d812      	bhi.n	8004738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	1ad2      	subs	r2, r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	429a      	cmp	r2, r3
 800471e:	d302      	bcc.n	8004726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004720:	2301      	movs	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e01b      	b.n	800475e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <prvInsertTimerInActiveList+0x7c>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fe fa49 	bl	8002bc8 <vListInsert>
 8004736:	e012      	b.n	800475e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d206      	bcs.n	800474e <prvInsertTimerInActiveList+0x62>
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e007      	b.n	800475e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <prvInsertTimerInActiveList+0x80>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3304      	adds	r3, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f7fe fa35 	bl	8002bc8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800475e:	697b      	ldr	r3, [r7, #20]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000c94 	.word	0x20000c94
 800476c:	20000c90 	.word	0x20000c90

08004770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	; 0x38
 8004774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004776:	e099      	b.n	80048ac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da17      	bge.n	80047ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	3304      	adds	r3, #4
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <prvProcessReceivedCommands+0x2e>
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e7fe      	b.n	800479c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a4:	6850      	ldr	r0, [r2, #4]
 80047a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a8:	6892      	ldr	r2, [r2, #8]
 80047aa:	4611      	mov	r1, r2
 80047ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db7a      	blt.n	80048aa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	3304      	adds	r3, #4
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe fa37 	bl	8002c38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ca:	463b      	mov	r3, r7
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff6d 	bl	80046ac <prvSampleTimeNow>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b09      	cmp	r3, #9
 80047d8:	d868      	bhi.n	80048ac <prvProcessReceivedCommands+0x13c>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <prvProcessReceivedCommands+0x70>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004809 	.word	0x08004809
 80047ec:	080048ad 	.word	0x080048ad
 80047f0:	08004863 	.word	0x08004863
 80047f4:	08004899 	.word	0x08004899
 80047f8:	08004809 	.word	0x08004809
 80047fc:	08004809 	.word	0x08004809
 8004800:	080048ad 	.word	0x080048ad
 8004804:	08004863 	.word	0x08004863
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	18d1      	adds	r1, r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004816:	f7ff ff69 	bl	80046ec <prvInsertTimerInActiveList>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d045      	beq.n	80048ac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004826:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d13d      	bne.n	80048ac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	441a      	add	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	2100      	movs	r1, #0
 8004840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004842:	f7ff fe23 	bl	800448c <xTimerGenericCommand>
 8004846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d12e      	bne.n	80048ac <prvProcessReceivedCommands+0x13c>
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	e7fe      	b.n	8004860 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <prvProcessReceivedCommands+0x114>
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e7fe      	b.n	8004882 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	18d1      	adds	r1, r2, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004892:	f7ff ff2b 	bl	80046ec <prvInsertTimerInActiveList>
					break;
 8004896:	e009      	b.n	80048ac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80048a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a4:	f000 fb58 	bl	8004f58 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048a8:	e000      	b.n	80048ac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80048aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <prvProcessReceivedCommands+0x15c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	1d39      	adds	r1, r7, #4
 80048b2:	2200      	movs	r2, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fc75 	bl	80031a4 <xQueueReceive>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f af5b 	bne.w	8004778 <prvProcessReceivedCommands+0x8>
	}
}
 80048c2:	bf00      	nop
 80048c4:	3730      	adds	r7, #48	; 0x30
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000c98 	.word	0x20000c98

080048d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048d6:	e044      	b.n	8004962 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048d8:	4b2b      	ldr	r3, [pc, #172]	; (8004988 <prvSwitchTimerLists+0xb8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048e2:	4b29      	ldr	r3, [pc, #164]	; (8004988 <prvSwitchTimerLists+0xb8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe f9a1 	bl	8002c38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	6938      	ldr	r0, [r7, #16]
 80048fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d12d      	bne.n	8004962 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4413      	add	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	d90e      	bls.n	8004936 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004924:	4b18      	ldr	r3, [pc, #96]	; (8004988 <prvSwitchTimerLists+0xb8>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f7fe f94a 	bl	8002bc8 <vListInsert>
 8004934:	e015      	b.n	8004962 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004936:	2300      	movs	r3, #0
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	2300      	movs	r3, #0
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	2100      	movs	r1, #0
 8004940:	6938      	ldr	r0, [r7, #16]
 8004942:	f7ff fda3 	bl	800448c <xTimerGenericCommand>
 8004946:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <prvSwitchTimerLists+0x92>
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	e7fe      	b.n	8004960 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <prvSwitchTimerLists+0xb8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1b5      	bne.n	80048d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <prvSwitchTimerLists+0xb8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <prvSwitchTimerLists+0xbc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a04      	ldr	r2, [pc, #16]	; (8004988 <prvSwitchTimerLists+0xb8>)
 8004978:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800497a:	4a04      	ldr	r2, [pc, #16]	; (800498c <prvSwitchTimerLists+0xbc>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6013      	str	r3, [r2, #0]
}
 8004980:	bf00      	nop
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000c90 	.word	0x20000c90
 800498c:	20000c94 	.word	0x20000c94

08004990 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004996:	f000 f927 	bl	8004be8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <prvCheckForValidListAndQueue+0x60>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d120      	bne.n	80049e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049a2:	4814      	ldr	r0, [pc, #80]	; (80049f4 <prvCheckForValidListAndQueue+0x64>)
 80049a4:	f7fe f8c2 	bl	8002b2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049a8:	4813      	ldr	r0, [pc, #76]	; (80049f8 <prvCheckForValidListAndQueue+0x68>)
 80049aa:	f7fe f8bf 	bl	8002b2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049ae:	4b13      	ldr	r3, [pc, #76]	; (80049fc <prvCheckForValidListAndQueue+0x6c>)
 80049b0:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <prvCheckForValidListAndQueue+0x64>)
 80049b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <prvCheckForValidListAndQueue+0x70>)
 80049b6:	4a10      	ldr	r2, [pc, #64]	; (80049f8 <prvCheckForValidListAndQueue+0x68>)
 80049b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049ba:	2300      	movs	r3, #0
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <prvCheckForValidListAndQueue+0x74>)
 80049c0:	4a11      	ldr	r2, [pc, #68]	; (8004a08 <prvCheckForValidListAndQueue+0x78>)
 80049c2:	2110      	movs	r1, #16
 80049c4:	200a      	movs	r0, #10
 80049c6:	f7fe f9c9 	bl	8002d5c <xQueueGenericCreateStatic>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <prvCheckForValidListAndQueue+0x60>)
 80049ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <prvCheckForValidListAndQueue+0x60>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <prvCheckForValidListAndQueue+0x60>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	490b      	ldr	r1, [pc, #44]	; (8004a0c <prvCheckForValidListAndQueue+0x7c>)
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe fdcc 	bl	800357c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049e4:	f000 f92e 	bl	8004c44 <vPortExitCritical>
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000c98 	.word	0x20000c98
 80049f4:	20000c68 	.word	0x20000c68
 80049f8:	20000c7c 	.word	0x20000c7c
 80049fc:	20000c90 	.word	0x20000c90
 8004a00:	20000c94 	.word	0x20000c94
 8004a04:	20000d44 	.word	0x20000d44
 8004a08:	20000ca4 	.word	0x20000ca4
 8004a0c:	08005260 	.word	0x08005260

08004a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3b04      	subs	r3, #4
 8004a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 0201 	bic.w	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a40:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <pxPortInitialiseStack+0x54>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3b14      	subs	r3, #20
 8004a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b20      	subs	r3, #32
 8004a56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a58:	68fb      	ldr	r3, [r7, #12]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	08004a69 	.word	0x08004a69

08004a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <prvTaskExitError+0x4c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a7a:	d009      	beq.n	8004a90 <prvTaskExitError+0x28>
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e7fe      	b.n	8004a8e <prvTaskExitError+0x26>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004aa2:	bf00      	nop
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0fc      	beq.n	8004aa4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	2000001c 	.word	0x2000001c
	...

08004ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004aca:	f380 8809 	msr	PSP, r0
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8004ade:	4770      	bx	lr

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ae8:	4806      	ldr	r0, [pc, #24]	; (8004b04 <prvPortStartFirstTask+0x1c>)
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f380 8808 	msr	MSP, r0
 8004af2:	b662      	cpsie	i
 8004af4:	b661      	cpsie	f
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	df00      	svc	0
 8004b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b02:	bf00      	nop
 8004b04:	e000ed08 	.word	0xe000ed08

08004b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b0e:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <xPortStartScheduler+0xcc>)
 8004b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b29      	ldr	r3, [pc, #164]	; (8004bd8 <xPortStartScheduler+0xd0>)
 8004b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b38:	2207      	movs	r2, #7
 8004b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b3c:	e009      	b.n	8004b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b3e:	4b27      	ldr	r3, [pc, #156]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d0ef      	beq.n	8004b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b5e:	4b1f      	ldr	r3, [pc, #124]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1c3 0307 	rsb	r3, r3, #7
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d009      	beq.n	8004b7e <xPortStartScheduler+0x76>
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	e7fe      	b.n	8004b7c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b7e:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b88:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b90:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004ba2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004bae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bb4:	f000 f8b0 	bl	8004d18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bbe:	f7ff ff93 	bl	8004ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bc2:	f7ff f8d9 	bl	8003d78 <vTaskSwitchContext>
	prvTaskExitError();
 8004bc6:	f7ff ff4f 	bl	8004a68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	e000e400 	.word	0xe000e400
 8004bd8:	20000d94 	.word	0x20000d94
 8004bdc:	20000d98 	.word	0x20000d98
 8004be0:	e000ed20 	.word	0xe000ed20
 8004be4:	2000001c 	.word	0x2000001c

08004be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <vPortEnterCritical+0x54>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <vPortEnterCritical+0x54>)
 8004c08:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <vPortEnterCritical+0x54>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d10e      	bne.n	8004c30 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <vPortEnterCritical+0x58>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <vPortEnterCritical+0x48>
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	e7fe      	b.n	8004c2e <vPortEnterCritical+0x46>
	}
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	2000001c 	.word	0x2000001c
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c4a:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <vPortExitCritical+0x48>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <vPortExitCritical+0x22>
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	e7fe      	b.n	8004c64 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <vPortExitCritical+0x48>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <vPortExitCritical+0x48>)
 8004c6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <vPortExitCritical+0x48>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <vPortExitCritical+0x3e>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	2000001c 	.word	0x2000001c

08004c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c90:	f3ef 8009 	mrs	r0, PSP
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <pxCurrentTCBConst>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ca0:	6010      	str	r0, [r2, #0]
 8004ca2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ca6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004caa:	f380 8811 	msr	BASEPRI, r0
 8004cae:	f7ff f863 	bl	8003d78 <vTaskSwitchContext>
 8004cb2:	f04f 0000 	mov.w	r0, #0
 8004cb6:	f380 8811 	msr	BASEPRI, r0
 8004cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	6808      	ldr	r0, [r1, #0]
 8004cc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cc6:	f380 8809 	msr	PSP, r0
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	4770      	bx	lr

08004cd0 <pxCurrentTCBConst>:
 8004cd0:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cf0:	f7fe ff84 	bl	8003bfc <xTaskIncrementTick>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <xPortSysTickHandler+0x3c>)
 8004cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	e000ed04 	.word	0xe000ed04

08004d18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <vPortSetupTimerInterrupt+0x30>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <vPortSetupTimerInterrupt+0x34>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <vPortSetupTimerInterrupt+0x38>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <vPortSetupTimerInterrupt+0x3c>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <vPortSetupTimerInterrupt+0x40>)
 8004d36:	3b01      	subs	r3, #1
 8004d38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d3a:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <vPortSetupTimerInterrupt+0x30>)
 8004d3c:	2207      	movs	r2, #7
 8004d3e:	601a      	str	r2, [r3, #0]
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	e000e010 	.word	0xe000e010
 8004d4c:	e000e018 	.word	0xe000e018
 8004d50:	20000010 	.word	0x20000010
 8004d54:	10624dd3 	.word	0x10624dd3
 8004d58:	e000e014 	.word	0xe000e014

08004d5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d62:	f3ef 8305 	mrs	r3, IPSR
 8004d66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	d913      	bls.n	8004d96 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d6e:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <vPortValidateInterruptPriority+0x68>)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <vPortValidateInterruptPriority+0x6c>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	7afa      	ldrb	r2, [r7, #11]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d209      	bcs.n	8004d96 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e7fe      	b.n	8004d94 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <vPortValidateInterruptPriority+0x70>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <vPortValidateInterruptPriority+0x74>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d909      	bls.n	8004dba <vPortValidateInterruptPriority+0x5e>
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	e7fe      	b.n	8004db8 <vPortValidateInterruptPriority+0x5c>
	}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	e000e3f0 	.word	0xe000e3f0
 8004dc8:	20000d94 	.word	0x20000d94
 8004dcc:	e000ed0c 	.word	0xe000ed0c
 8004dd0:	20000d98 	.word	0x20000d98

08004dd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	; 0x28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004de0:	f7fe fe54 	bl	8003a8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004de4:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <pvPortMalloc+0x170>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004dec:	f000 f90c 	bl	8005008 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004df0:	4b55      	ldr	r3, [pc, #340]	; (8004f48 <pvPortMalloc+0x174>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f040 808c 	bne.w	8004f16 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01c      	beq.n	8004e3e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004e04:	2208      	movs	r2, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d013      	beq.n	8004e3e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f023 0307 	bic.w	r3, r3, #7
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <pvPortMalloc+0x6a>
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e7fe      	b.n	8004e3c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d068      	beq.n	8004f16 <pvPortMalloc+0x142>
 8004e44:	4b41      	ldr	r3, [pc, #260]	; (8004f4c <pvPortMalloc+0x178>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d863      	bhi.n	8004f16 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e4e:	4b40      	ldr	r3, [pc, #256]	; (8004f50 <pvPortMalloc+0x17c>)
 8004e50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e52:	4b3f      	ldr	r3, [pc, #252]	; (8004f50 <pvPortMalloc+0x17c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e58:	e004      	b.n	8004e64 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d903      	bls.n	8004e76 <pvPortMalloc+0xa2>
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f1      	bne.n	8004e5a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e76:	4b33      	ldr	r3, [pc, #204]	; (8004f44 <pvPortMalloc+0x170>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d04a      	beq.n	8004f16 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2208      	movs	r2, #8
 8004e86:	4413      	add	r3, r2
 8004e88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	1ad2      	subs	r2, r2, r3
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d91e      	bls.n	8004ee0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d009      	beq.n	8004ec8 <pvPortMalloc+0xf4>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	e7fe      	b.n	8004ec6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eda:	69b8      	ldr	r0, [r7, #24]
 8004edc:	f000 f8f6 	bl	80050cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ee0:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <pvPortMalloc+0x178>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <pvPortMalloc+0x178>)
 8004eec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eee:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <pvPortMalloc+0x178>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <pvPortMalloc+0x180>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d203      	bcs.n	8004f02 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004efa:	4b14      	ldr	r3, [pc, #80]	; (8004f4c <pvPortMalloc+0x178>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <pvPortMalloc+0x180>)
 8004f00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <pvPortMalloc+0x174>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f16:	f7fe fdc7 	bl	8003aa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <pvPortMalloc+0x164>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e7fe      	b.n	8004f36 <pvPortMalloc+0x162>
	return pvReturn;
 8004f38:	69fb      	ldr	r3, [r7, #28]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3728      	adds	r7, #40	; 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	200019a4 	.word	0x200019a4
 8004f48:	200019b0 	.word	0x200019b0
 8004f4c:	200019a8 	.word	0x200019a8
 8004f50:	2000199c 	.word	0x2000199c
 8004f54:	200019ac 	.word	0x200019ac

08004f58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d046      	beq.n	8004ff8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	425b      	negs	r3, r3
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4413      	add	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4b20      	ldr	r3, [pc, #128]	; (8005000 <vPortFree+0xa8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <vPortFree+0x42>
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	e7fe      	b.n	8004f98 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <vPortFree+0x5e>
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	e7fe      	b.n	8004fb4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	4b11      	ldr	r3, [pc, #68]	; (8005000 <vPortFree+0xa8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d019      	beq.n	8004ff8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d115      	bne.n	8004ff8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <vPortFree+0xa8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fdc:	f7fe fd56 	bl	8003a8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <vPortFree+0xac>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4413      	add	r3, r2
 8004fea:	4a06      	ldr	r2, [pc, #24]	; (8005004 <vPortFree+0xac>)
 8004fec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fee:	6938      	ldr	r0, [r7, #16]
 8004ff0:	f000 f86c 	bl	80050cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ff4:	f7fe fd58 	bl	8003aa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ff8:	bf00      	nop
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	200019b0 	.word	0x200019b0
 8005004:	200019a8 	.word	0x200019a8

08005008 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800500e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005012:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005014:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <prvHeapInit+0xac>)
 8005016:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3307      	adds	r3, #7
 8005026:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0307 	bic.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <prvHeapInit+0xac>)
 8005038:	4413      	add	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005040:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <prvHeapInit+0xb0>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005046:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <prvHeapInit+0xb0>)
 8005048:	2200      	movs	r2, #0
 800504a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005054:	2208      	movs	r2, #8
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0307 	bic.w	r3, r3, #7
 8005062:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <prvHeapInit+0xb4>)
 8005068:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <prvHeapInit+0xb4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <prvHeapInit+0xb4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	1ad2      	subs	r2, r2, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <prvHeapInit+0xb4>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <prvHeapInit+0xb8>)
 8005096:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <prvHeapInit+0xbc>)
 800509e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <prvHeapInit+0xc0>)
 80050a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050a6:	601a      	str	r2, [r3, #0]
}
 80050a8:	bf00      	nop
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000d9c 	.word	0x20000d9c
 80050b8:	2000199c 	.word	0x2000199c
 80050bc:	200019a4 	.word	0x200019a4
 80050c0:	200019ac 	.word	0x200019ac
 80050c4:	200019a8 	.word	0x200019a8
 80050c8:	200019b0 	.word	0x200019b0

080050cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050d4:	4b27      	ldr	r3, [pc, #156]	; (8005174 <prvInsertBlockIntoFreeList+0xa8>)
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e002      	b.n	80050e0 <prvInsertBlockIntoFreeList+0x14>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d8f7      	bhi.n	80050da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4413      	add	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d108      	bne.n	800510e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	441a      	add	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	441a      	add	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d118      	bne.n	8005154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b14      	ldr	r3, [pc, #80]	; (8005178 <prvInsertBlockIntoFreeList+0xac>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d00d      	beq.n	800514a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	441a      	add	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e008      	b.n	800515c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <prvInsertBlockIntoFreeList+0xac>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e003      	b.n	800515c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d002      	beq.n	800516a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	2000199c 	.word	0x2000199c
 8005178:	200019a4 	.word	0x200019a4

0800517c <__libc_init_array>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	2600      	movs	r6, #0
 8005180:	4d0c      	ldr	r5, [pc, #48]	; (80051b4 <__libc_init_array+0x38>)
 8005182:	4c0d      	ldr	r4, [pc, #52]	; (80051b8 <__libc_init_array+0x3c>)
 8005184:	1b64      	subs	r4, r4, r5
 8005186:	10a4      	asrs	r4, r4, #2
 8005188:	42a6      	cmp	r6, r4
 800518a:	d109      	bne.n	80051a0 <__libc_init_array+0x24>
 800518c:	f000 f830 	bl	80051f0 <_init>
 8005190:	2600      	movs	r6, #0
 8005192:	4d0a      	ldr	r5, [pc, #40]	; (80051bc <__libc_init_array+0x40>)
 8005194:	4c0a      	ldr	r4, [pc, #40]	; (80051c0 <__libc_init_array+0x44>)
 8005196:	1b64      	subs	r4, r4, r5
 8005198:	10a4      	asrs	r4, r4, #2
 800519a:	42a6      	cmp	r6, r4
 800519c:	d105      	bne.n	80051aa <__libc_init_array+0x2e>
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a4:	4798      	blx	r3
 80051a6:	3601      	adds	r6, #1
 80051a8:	e7ee      	b.n	8005188 <__libc_init_array+0xc>
 80051aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ae:	4798      	blx	r3
 80051b0:	3601      	adds	r6, #1
 80051b2:	e7f2      	b.n	800519a <__libc_init_array+0x1e>
 80051b4:	080052a4 	.word	0x080052a4
 80051b8:	080052a4 	.word	0x080052a4
 80051bc:	080052a4 	.word	0x080052a4
 80051c0:	080052a8 	.word	0x080052a8

080051c4 <memcpy>:
 80051c4:	440a      	add	r2, r1
 80051c6:	4291      	cmp	r1, r2
 80051c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051cc:	d100      	bne.n	80051d0 <memcpy+0xc>
 80051ce:	4770      	bx	lr
 80051d0:	b510      	push	{r4, lr}
 80051d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051d6:	4291      	cmp	r1, r2
 80051d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051dc:	d1f9      	bne.n	80051d2 <memcpy+0xe>
 80051de:	bd10      	pop	{r4, pc}

080051e0 <memset>:
 80051e0:	4603      	mov	r3, r0
 80051e2:	4402      	add	r2, r0
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d100      	bne.n	80051ea <memset+0xa>
 80051e8:	4770      	bx	lr
 80051ea:	f803 1b01 	strb.w	r1, [r3], #1
 80051ee:	e7f9      	b.n	80051e4 <memset+0x4>

080051f0 <_init>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	bf00      	nop
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr

080051fc <_fini>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr
